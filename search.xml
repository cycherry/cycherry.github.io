<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA基础数据类型</title>
    <url>/2020/11/01/JAVA%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、JAVA标识符"><a href="#一、JAVA标识符" class="headerlink" title="一、JAVA标识符"></a>一、JAVA标识符</h2><p>1、标识符，由字母、数字、下划线、美元符号，<strong>长度不受限制</strong>；</p>
<p>2、第一个字符<strong>不能是数字</strong>；</p>
<p>3、标识符<strong>不能是关键字</strong>；</p>
<p>4、标识符<strong>不能是true、false、null</strong>；</p>
<p>🐖：<em>标识符字母区分大小写</em></p>
<h2 id="二、JAVA基本数据类型"><a href="#二、JAVA基本数据类型" class="headerlink" title="二、JAVA基本数据类型"></a>二、JAVA基本数据类型</h2><p>逻辑类型：boolean</p>
<p>整型类型：byte、short、int、long               <em>byte范围：-127<del>128；short范围：-2^15</del>2^15-1;指数2倍+1类推</em></p>
<p>字符类型：char                                            <em>char范围：0-65535</em></p>
<p>浮点类型：float、double</p>
<p>🐖：1(int) = 4(byte) = 32(bit)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="number">7</span>;</span><br><span class="line"><span class="comment">//00000000 00000000 00000000 00000111</span></span><br></pre></td></tr></table></figure>

<p>🐖：基本数据类型只有short、byte没有常量表示。</p>
<p>long类型：128L，十六进制、八进制后都要有L</p>
<p>double类型：34.56D或者34.56d，d/D允许省略</p>
<p><strong>强调一个整数是short或byte用强制类型转换：short(28)、byte(-12)。</strong></p>
<h3 id="1、基本数据类型转换"><a href="#1、基本数据类型转换" class="headerlink" title="1、基本数据类型转换"></a>1、基本数据类型转换</h3><p>基本数据类型，精读<strong>从低到高</strong></p>
<p>byte、short、char、int、long、float、double</p>
<p>低—&gt;高：自动转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> x=<span class="number">100</span>;</span><br><span class="line">System.out.println(x);<span class="comment">//打印x，x=100.0</span></span><br></pre></td></tr></table></figure>

<p>高–&gt;低：显式类型转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：（类型名）要转换的值；</span><br><span class="line"><span class="keyword">int</span> x=(<span class="keyword">int</span>)<span class="number">34.56</span>;</span><br></pre></td></tr></table></figure>



<h2 id="三、JAVA输入输出"><a href="#三、JAVA输入输出" class="headerlink" title="三、JAVA输入输出"></a>三、JAVA输入输出</h2><h3 id="1、输入"><a href="#1、输入" class="headerlink" title="1、输入"></a>1、输入</h3><h4 id="a、整型、逻辑类型、浮点型："><a href="#a、整型、逻辑类型、浮点型：" class="headerlink" title="a、整型、逻辑类型、浮点型："></a><strong>a、整型、逻辑类型、浮点型：</strong></h4><p>使用Scanner类创建对象，使用对象调用方法：</p>
<p>nextInt()、nextLong()、nextShort()、nextBoolean()、nextByte()、nextFloat()、nextDouble()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">day08_3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;正负数判断，请输入一个数：&quot;</span>);</span><br><span class="line">		Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> i=reader.nextInt();</span><br><span class="line">		<span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">			System.out.println(<span class="string">&quot;偶数！！！&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			System.out.println(<span class="string">&quot;奇数！！！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b、字符型："><a href="#b、字符型：" class="headerlink" title="b、字符型："></a><strong>b、字符型：</strong></h4><p>charAt()方法:</p>
<p>创建reader对象，调用next()、由于没有nextChar()方法，所以取读入字符串的第一个字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">char</span> c = reader.next().charAt(<span class="number">0</span>);	</span><br></pre></td></tr></table></figure>

<p>toCharArray()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">char</span> c = reader.next().toCharArray()[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p><em>当没有Scanner类时：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">char</span> c = (<span class="keyword">char</span>)<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)).read();</span><br></pre></td></tr></table></figure>



<h3 id="2、输出"><a href="#2、输出" class="headerlink" title="2、输出"></a>2、输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println();<span class="comment">//换行</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print();<span class="comment">//不换行</span></span><br></pre></td></tr></table></figure>

<p>格式化输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.printf(&quot;格式控制部分&quot;,&quot;表达式1，表达式2&quot;);</span><br></pre></td></tr></table></figure>

<p>格式控制：</p>
<table>
<thead>
<tr>
<th>%d</th>
<th>整型</th>
<th>%c</th>
<th>char数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>%s</td>
<td>字符串型</td>
<td>%md</td>
<td>int型占m列</td>
</tr>
<tr>
<td>%f</td>
<td>浮点型、小数部分最多保留6位</td>
<td>%m.nf</td>
<td>浮点型占m列，小数点保留n位</td>
</tr>
</tbody></table>
<h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><h3 id="1、数组声明"><a href="#1、数组声明" class="headerlink" title="1、数组声明"></a>1、数组声明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组类型 数组名[];</span><br><span class="line"></span><br><span class="line">数组类型[] 数组名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> boy[];</span><br><span class="line"><span class="keyword">int</span>[] boy;</span><br></pre></td></tr></table></figure>

<p>🐖：<strong>java数组声明不允许指定元素个数</strong></p>
<h3 id="2、数组创建"><a href="#2、数组创建" class="headerlink" title="2、数组创建"></a>2、数组创建</h3><p>格式：数组名 = new  数组类型【数组元素的个数】；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">boy = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<p>🐖：数组属于引用数据类型</p>
<p>​        创建数组之后，数组名存放数组的首地址，该地址称为数组的引用；</p>
<p>声明+创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> boy[] = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure>



<h3 id="3、数组长度"><a href="#3、数组长度" class="headerlink" title="3、数组长度"></a>3、数组长度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> boy[] = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>];</span><br><span class="line">boy.length();<span class="comment">//返回一维数组个数，4</span></span><br></pre></td></tr></table></figure>



<h3 id="4、数组初始化"><a href="#4、数组初始化" class="headerlink" title="4、数组初始化"></a>4、数组初始化</h3><p>一维数组初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> boy[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> boy[] =<span class="keyword">new</span> boy[<span class="number">5</span>];</span><br><span class="line">boy[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">boy[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">boy[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">boy[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line">boy[<span class="number">4</span>]=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>二维数组初始化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] =&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>



<p>5、数组引用</p>
<p>数组赋值之后，系统释放被赋值数组的元素，被复制数组名存放赋值数组的引用地址。</p>
<p>🐖：不创建新的数组，两个引用名指向一个地址。</p>
<p>​        <strong>可以用于复制数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> b[]= &#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">&quot;数组a的元素个数=&quot;</span>+a.length);</span><br><span class="line">		System.out.println(<span class="string">&quot;数组b的元素个数=&quot;</span>+b.length);</span><br><span class="line">		System.out.println(<span class="string">&quot;数组a的引用=&quot;</span>+a);</span><br><span class="line">		System.out.println(<span class="string">&quot;数组b的引用=&quot;</span>+b);</span><br><span class="line">		a=b;</span><br><span class="line">		System.out.println(<span class="string">&quot;数组a的元素个数=&quot;</span>+a.length);</span><br><span class="line">		System.out.println(<span class="string">&quot;数组b的元素个数=&quot;</span>+b.length);</span><br><span class="line">		System.out.println(<span class="string">&quot;数组a的引用=&quot;</span>+a);</span><br><span class="line">		System.out.println(<span class="string">&quot;数组b的引用=&quot;</span>+b);</span><br><span class="line">		System.out.println(<span class="string">&quot;a[0]=&quot;</span>+a[<span class="number">0</span>]+<span class="string">&quot;,a[1]=&quot;</span>+a[<span class="number">1</span>]+<span class="string">&quot;,a[2]=&quot;</span>+a[<span class="number">2</span>]);</span><br><span class="line">		System.out.println(<span class="string">&quot;b[0]=&quot;</span>+b[<span class="number">0</span>]+<span class="string">&quot;,b[1]=&quot;</span>+b[<span class="number">1</span>]+<span class="string">&quot;,b[2]=&quot;</span>+b[<span class="number">2</span>]);</span><br><span class="line">	 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="5、数组格式转换"><a href="#5、数组格式转换" class="headerlink" title="5、数组格式转换"></a>5、数组格式转换</h3><p>用Arrays类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Arrays.toString(a);<span class="comment">//得到字符串[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>



<h3 id="6、数组复制"><a href="#6、数组复制" class="headerlink" title="6、数组复制"></a>6、数组复制</h3><h4 id="a、直接赋值"><a href="#a、直接赋值" class="headerlink" title="a、直接赋值"></a>a、直接赋值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,b[];</span><br><span class="line">a=b;</span><br></pre></td></tr></table></figure>

<h4 id="b、arraycopy-方法"><a href="#b、arraycopy-方法" class="headerlink" title="b、arraycopy()方法"></a>b、arraycopy()方法</h4><p>循环把一个数组中的元素赋值给另外一个数组；<strong>System调用方法；</strong></p>
<p>public static <strong>void</strong> arraycopy(sourceArray，int index1，copyArray，int index2，int length)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> []a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,b=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">&quot;数组b之前：&quot;</span>+Arrays.toString(b));</span><br><span class="line">		System.arraycopy(a,<span class="number">1</span>,b,<span class="number">1</span>,a.length-<span class="number">2</span>);<span class="comment">//数组下标</span></span><br><span class="line">		System.out.println(<span class="string">&quot;数组b之后：&quot;</span>+Arrays.toString(b));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：缺点，必须提前创建copyarray数组</p>
<h4 id="c、copyOf-和copyOfRange-方法"><a href="#c、copyOf-和copyOfRange-方法" class="headerlink" title="c、copyOf()和copyOfRange()方法"></a>c、copyOf()和copyOfRange()方法</h4><p>函数原型：public static <strong>float[]</strong> copyOf(float[] original ,int newLength)</p>
<p>第一个参数，要复制的数组名，第二个参数，复制长度。<strong>相应的还有int[] copyOf()等。</strong></p>
<p>🐖：当长度超过其本来的长度，其余值，默认是0；</p>
<p>copyOf()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span> array[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> []count=Arrays.copyOf(array,<span class="number">7</span>);<span class="comment">//数组下标</span></span><br><span class="line">		System.out.println(count[<span class="number">6</span>]);<span class="comment">//输出结果  0</span></span><br><span class="line">		System.out.println(Arrays.toString(array));<span class="comment">//输出结果  [1,2,3,4,5]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>copyOfRange()：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span> array[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> []count=Arrays.copyOfRange(array,<span class="number">2</span>,<span class="number">5</span>);<span class="comment">//数组下标，从2开始到5，包括2，不包括5</span></span><br><span class="line">		System.out.println(Arrays.toString(count));<span class="comment">//输出结果[3,4,5]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、数组排序和二分查找"><a href="#7、数组排序和二分查找" class="headerlink" title="7、数组排序和二分查找"></a>7、数组排序和二分查找</h3><p>Array类调用方法：</p>
<p>public static void sort(double a[])；升序排序</p>
<p>public static void sort(double a[,int start,int end)；从数组下标start~end-1，升序排序</p>
<p>public static void binarySearch(double []a,double number)；二分查找，数组之前必须是排好序的，存在返回索引，不存在返回负数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] array= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">344</span>&#125;;</span><br><span class="line">		Arrays.sort(array,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">		System.out.println(Arrays.toString(array));</span><br><span class="line">		<span class="keyword">int</span>[] array1= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">344</span>&#125;;</span><br><span class="line">		System.out.println(Arrays.toString(array1));</span><br><span class="line">		System.out.println(Arrays.binarySearch(array, <span class="number">32</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8、枚举类型</p>
<p>enum声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">array</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	spring,summer,autumn,winter</span><br><span class="line">&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Season x=Season.spring;<span class="comment">//获取enum中的对象</span></span><br><span class="line">		System.out.println(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：联合编译时。只需要把enum放在其他文件声明为public，系统会自动编译其需要的文件</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/01/GDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>GDB基本使用</p>
<p><strong>1、编译</strong></p>
<p>eg：gcc -g  文件名  -o 可执行文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -g demo.c -o demo</span><br></pre></td></tr></table></figure>

<p>注：-o 可执行文件名，可不写。系统默认生成执行文件a.out</p>
<p><strong>2、开始启动调试</strong></p>
<p>eg:  gdb demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb demo</span><br></pre></td></tr></table></figure>

<p><strong>3、查看代码</strong></p>
<p>eg:  l（list）</p>
<p><img src="./GDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20200914173248853.png" alt="image-20200914173248853"></p>
<p>注：l+数字显示具体，默认显示10行；  gdb调试工具（支持缩写）</p>
<p><strong>4、打断点+行数</strong></p>
<p>eg：b（break）  20</p>
<p><img src="./GDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20200914173740166.png" alt="image-20200914173740166"></p>
<p><strong>5、运行程序</strong></p>
<p>eg：run</p>
<p><img src="./GDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20200914173822741.png" alt="image-20200914173822741"></p>
<p><strong>6、重复执行上一命令，Enter</strong></p>
<p><strong>7、查看变量变化</strong></p>
<p>eg:  print   i(变量名）</p>
<p><img src="./GDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20200914174105731.png" alt="image-20200914174105731"></p>
<p><strong>8、查看变量类型</strong></p>
<p>eg：  whatis  变量名</p>
<p><img src="./GDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20200914174622382.png" alt="image-20200914174622382"></p>
<p><strong>9、运行至当前函数结束</strong></p>
<p>eg：   finish</p>
<p><img src="./GDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20200914174820107.png" alt="image-20200914174820107"></p>
<p><strong>10、运行至下一语句：</strong>n（next）</p>
<p><strong>11、退出gdb调试：</strong>q（quit）</p>
]]></content>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/11/01/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h2><p>1、定义</p>
<p>单例模式：确保一个类只有一个实例，并且提供一个全局访问点；</p>
<p>2、单例模式特点：</p>
<p>只有一个实例；</p>
<p>自我实例化；</p>
<p>提供全局访问点；</p>
<p>3、单例模式优缺点</p>
<p><strong>优点</strong>：由于单例模式只生成了一个实例，所以能够节约系统资源，减少性能开销，提高系统效率，同时也能够严格控制客户对它的访问。</p>
<p><strong>缺点</strong>：也正是因为系统中只有一个实例，这样就导致了单例类的职责过重，违背了“单一职责原则”，同时也没有抽象类，这样扩展起来有一定的困难。</p>
<p>4、单例模式 五种实现方式</p>
<p>a、饿汉式</p>
<blockquote>
<p>线程安全，调用效率高。但是不能延时加载</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Single_2 instance=<span class="keyword">new</span> Single_2(); <span class="comment">//1、内部创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single_2</span><span class="params">()</span></span>&#123;                   <span class="comment">//2、构造器私有化——外部不能创建对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single_1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;  <span class="comment">//3、公有静态方法，返回实例对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>b、懒汉式</p>
<blockquote>
<p>线程不安全</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Single_1 instance=<span class="keyword">null</span>; <span class="comment">//1、内部创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single_1</span><span class="params">()</span></span>&#123;                   <span class="comment">//2、构造器私有化——外部不能创建对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single_1 <span class="title">getInstance</span><span class="params">()</span></span>&#123; <span class="comment">//3、共有静态方法，返回实例对象</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance=<span class="keyword">new</span> Single_1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>c、双重检查加锁（懒汉式）</p>
<blockquote>
<p>线程安全；</p>
<p>同步代码块实现，线程安全</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single_3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Single_3 instance_3=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single_3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single_3 <span class="title">getInstance_3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance_3==<span class="keyword">null</span>)<span class="comment">//第一重检查</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Single_3.class) &#123;<span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance_3 == <span class="keyword">null</span>) &#123;<span class="comment">//第二重检查</span></span><br><span class="line">                    instance_3 = <span class="keyword">new</span> Single_3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance_3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>d、静态内部类</p>
<blockquote>
<p>实现单例模式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single_4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sin</span> </span>&#123;                  <span class="comment">//静态内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Single_4 instance_4 = <span class="keyword">new</span> Single_4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single_4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single_4 <span class="title">getInstance_4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Sin.instance_4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5、枚举类实现单例模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">	uniqueInstance;<span class="comment">// 定义一个枚举的元素，它 就代表了Singleton的一个实例</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 功能处理 </span></span><br><span class="line">	</span><br><span class="line">        System.err.println(<span class="string">&quot;功能处理&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/01/a%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<p>a标签</p>
<p>1、a标签属于内联元素（行内元素）</p>
<p>2、多个a标签一列显示</p>
<p>将a元素变为块级元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、块级元素、内联元素、内联-块级元素</p>
<table>
<thead>
<tr>
<th>块级元素</th>
<th>换行、可设置宽高</th>
</tr>
</thead>
<tbody><tr>
<td>内联元素</td>
<td>不换行、不可设置宽高</td>
</tr>
<tr>
<td>内联-块级元素</td>
<td>不换行、可设置宽高</td>
</tr>
</tbody></table>
<p>4、a标签的herf属性</p>
<p>用于存放跳转地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5、a标签target属性</p>
<table>
<thead>
<tr>
<th>_blank</th>
<th>点击一次，打开新窗口（会创建不知一个新窗口，根据点击数）</th>
</tr>
</thead>
<tbody><tr>
<td>_new</td>
<td>始终，同一窗口打开（只创建一个新窗口）</td>
</tr>
<tr>
<td>_self</td>
<td>默认，当前窗口打开</td>
</tr>
<tr>
<td>_parent</td>
<td>父级窗口打开</td>
</tr>
<tr>
<td>_top</td>
<td>顶级窗口打开</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/01/kali/</url>
    <content><![CDATA[<p>kali添加环境变量</p>
<p>命令行输入：export PATH=$PATH:/sbin</p>
<p>​                      source /etc/profile   生效</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/01/makefile%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>makefile基本使用</p>
<p><strong>1、基本三要素</strong></p>
<p>目标、依赖、命令</p>
<p><strong>2、多文件makefile文件的编写</strong></p>
<p><img src="https://img-blog.csdn.net/20181002090633110" alt="img"></p>
<p>makefile文件可以有多个规则，当第一个规则没有发现相应的以来，就继续执行下一个；</p>
<p>最上面的目标是最终目标，一定要写在最上面，也是最后要生成的文件。</p>
<p><strong>3、自定义变量</strong></p>
<p>obj=main.o add.o sub.o</p>
<p><strong>4、变量引用</strong></p>
<p>$（obj）</p>
<p><strong>5、makefile维护变量</strong></p>
<p>CC：cc（即gcc）<br>APPFLAGS：预处理使用的选项<br>CFLAGS：编译的时候使用的选项<br>LDFLAGS：链接库使用的选项</p>
<p>6、makefile中的函数</p>
<ol>
<li>wildcard 查找当前目录下所有.c文件，返回值给src<br>src=$(wildcard ./*.c)</li>
<li>patsubst 替换所有.c文件为.o文件<br>obj=$(patsubst ./%.c, ./%.o, $(src))</li>
</ol>
<p>7、删除原来的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.PHONY:clean</span><br><span class="line">clean:</span><br><span class="line">		rm $(obj)  $(target)  -f</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/11/01/div%E5%B1%85%E4%B8%AD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>div居中方法</p>
<p>1、定位+2D转换——–（推荐使用）</p>
<p>父元素设置相对定位；</p>
<p>子元素设置绝对定位；</p>
<p>transform:translate(-50%,-50%);</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.father</span>&#123;</span></span><br><span class="line">				position: relative;</span><br><span class="line">				width: 100px;</span><br><span class="line">				height: 100px;</span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span>: <span class="selector-id">#53E3A6</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.son</span>&#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				width: 50px;</span><br><span class="line">				height: 50px;</span><br><span class="line"><span class="css">				<span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;        </span></span><br><span class="line"><span class="css">				<span class="selector-tag">transform</span><span class="selector-pseudo">:translate(-50</span>%,<span class="selector-tag">-50</span>%);<span class="comment">/*  2D转换*/</span></span></span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、定位+计算 宽高</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.father</span>&#123;</span></span><br><span class="line">				position: relative;</span><br><span class="line">				width: 100px;</span><br><span class="line">				height: 100px;</span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span>: <span class="selector-id">#53E3A6</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.son</span>&#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				width: 50px;</span><br><span class="line">				height: 50px;</span><br><span class="line"><span class="css">				<span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line">			   /*margin-left:-25px;</span><br><span class="line">				margin-top: -25px;   计算宽高 */</span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>内部类与异常类</title>
    <url>/2020/11/01/%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E5%BC%82%E5%B8%B8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h2><p>内部类：一个类中声明另一个类</p>
<p>外嵌类：包含内部类的类</p>
<p>a、内部类的，外嵌类成员变量，在内部内中仍然有效；</p>
<p>b、在内部类中的方法，可以调用外嵌类中的方法；</p>
<p>c、内部类类体中不可以声明类变量和类方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCowForm</span> </span>&#123;</span><br><span class="line">	RedCow cow;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">RedCow</span></span>&#123;</span><br><span class="line">		<span class="comment">//static RedCow co;    x</span></span><br><span class="line">		<span class="comment">//static void sound() &#123;&#125;  x</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>d、在外嵌类类体中，可以用内部类声明对象，作为外嵌类的成员；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCowForm</span> </span>&#123;</span><br><span class="line">	RedCow cow;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">RedCow</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e、内部类仅供它的外嵌类使用，其他类不能用内部类声明对象；</p>
<p>🐖：带有内部类的字节码文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外嵌类类名$内部类类名.class</span><br></pre></td></tr></table></figure>

<p>​    <strong>内部类可以被static修饰，非内部类不可以被static修饰，类是一种数据类型，那么内部类就是外部类的一种静态数据类型；</strong></p>
<p>​    <em>被static修饰的内部类就可以被其他类用来创建对象；</em></p>
<p>​    <strong>static内部类不能操作外嵌类中的实例成员变量；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCowFarm</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> String farmName;</span><br><span class="line">	RedCow cow;  <span class="comment">//在外嵌类类体中，可以用内部类声明对象，作为外嵌类的成员</span></span><br><span class="line">	<span class="comment">//无参构造函数</span></span><br><span class="line">	RedCowFarm()&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	RedCowFarm(String s)&#123;</span><br><span class="line">		cow = <span class="keyword">new</span> RedCow(<span class="number">150</span>,<span class="number">112</span>,<span class="number">5000</span>);</span><br><span class="line">		farmName=s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCowMess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cow.speak();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//内部类RedCow</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">RedCow</span></span>&#123;</span><br><span class="line">		String cowName=<span class="string">&quot;红牛&quot;</span>;</span><br><span class="line">		<span class="keyword">int</span> height,weight,price;</span><br><span class="line">		RedCow(<span class="keyword">int</span> h,<span class="keyword">int</span> w,<span class="keyword">int</span> p)&#123;</span><br><span class="line">			height=h;</span><br><span class="line">			weight=w;</span><br><span class="line">			price=p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="comment">//内部类的外嵌类成员依然有效farmName</span></span><br><span class="line">			System.out.println(<span class="string">&quot;我是&quot;</span>+cowName+<span class="string">&quot;,身高:&quot;</span>+height+<span class="string">&quot;cm体重:&quot;</span>+weight+<span class="string">&quot;kg,生活在&quot;</span>+farmName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		RedCowFarm farm = <span class="keyword">new</span> RedCowFarm(<span class="string">&quot;红牛牧场&quot;</span>);</span><br><span class="line">		farm.showCowMess();</span><br><span class="line">		farm.cow.speak();<span class="comment">//调用内部类函数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、匿名类"><a href="#二、匿名类" class="headerlink" title="二、匿名类"></a>二、匿名类</h2><p>a、和类有关的匿名类</p>
<p>匿名类是一个子类；</p>
<p>匿名类是一个内部类；</p>
<p>不能用匿名类声明对象，可以用匿名类创建对象；</p>
<p>匿名类可以继承父类的方法，也可以重写父类的方法；</p>
<p>匿名类可以访问外嵌类成员变量和方法；</p>
<p>匿名类类体不能声明static成员变量和static方法———<strong>此处和内部类一样</strong></p>
<p>为什么有匿名类？</p>
<p>没有显式的声明一个类的对象，又想用子类创建一个对象；</p>
<p>b、和接口有关的匿名类</p>
<p>java允许直接使用接口名和一个类体创建一个匿名类对象——默认是实现了该接口去掉类声明的类体；</p>
<p>例：Computable是一个接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Computable()&#123;</span><br><span class="line">	实现接口的匿名类的类体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>方法的参数可以是接口类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(Computable x)</span></span></span><br></pre></td></tr></table></figure>



<p>可以使用接口名和类体创建一个匿名对象传递给方法的参数–类体重写接口中的<strong>所有方法</strong>；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(new Computable()</span></span>&#123;</span><br><span class="line">    实现接口匿名类的类体</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="三、异常类"><a href="#三、异常类" class="headerlink" title="三、异常类"></a>三、异常类</h2><p>异常：程序运行时产生的错误；</p>
<p>java异常出现在方法调用过程中，出现异常抛出异常对象产生异常，并等待处理；</p>
<h3 id="1、try-catch语句"><a href="#1、try-catch语句" class="headerlink" title="1、try-catch语句"></a>1、try-catch语句</h3><p>try部分——产生异常部分；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="comment">//产生异常的程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>catch部分—处理异常；</p>
<p>当try部分出现异常，try内立即停止执行，转向catch处理异常部分；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>（ExceptionSubClass）&#123;</span><br><span class="line">	<span class="comment">//处理异常代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ExceptionSubClass1)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ExceptionSubClass2)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>catch异常类中的异常类，都是Exception的子类，子类之间不能有父字关系，有的话保留一个父类catch就行；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>,m=<span class="number">0</span>,t=<span class="number">666</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">           m=Integer.parseInt(<span class="string">&quot;8888&quot;</span>);</span><br><span class="line">           n=Integer.parseInt(<span class="string">&quot;ad888&quot;</span>);<span class="comment">//发生异常，直接跳转catch捕获异常</span></span><br><span class="line">           t=<span class="number">999</span>;<span class="comment">//来不及执行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常：&quot;</span>+e.getMessage());</span><br><span class="line">            n=<span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;n=&quot;</span>+n+<span class="string">&quot;,m=&quot;</span>+m+<span class="string">&quot;,t=&quot;</span>+t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、自定义异常类"><a href="#2、自定义异常类" class="headerlink" title="2、自定义异常类"></a>2、自定义异常类</h3><p>扩展Exception类，定义自己的异常类；</p>
<p>一个方法在声明时，可以使用throws关键字声明要产生的若干个异常，并在该方法的方法体中具体给出产生异常的操作；</p>
<p>扩展Exception类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    String message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntegerException</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        message=<span class="string">&quot;年龄&quot;</span>+m+<span class="string">&quot;不合理&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用throws关键字声明要产生的若干个异常</p>
<p>使用  throw抛出异常，终止程序，跳转到异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> IntegerException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age&gt;<span class="number">160</span>||age&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IntegerException(age);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄&quot;</span>+age+<span class="string">&quot;合理&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People wang =<span class="keyword">new</span> People(),</span><br><span class="line">                zhang =<span class="keyword">new</span> People();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wang.setAge(<span class="number">180</span>);</span><br><span class="line">            System.out.println(wang.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IntegerException e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            zhang.setAge(<span class="number">37</span>);</span><br><span class="line">            System.out.println(zhang.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IntegerException e)&#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、finally语句"><a href="#四、finally语句" class="headerlink" title="四、finally语句"></a>四、finally语句</h2><p>带finally的try-catch语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;&#125;</span><br><span class="line"><span class="keyword">catch</span>(ExceptionSubClass)&#123;&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：try-catch执行完执行finally语句；</p>
<p>​        finally最后一定会执行；</p>
<p>🐖：try-catch语句中<strong>执行return语句，finally语句也会被执行</strong>；</p>
<p>​        执行程序退出语句，finally语句不会被执行，当然程序退出语句接下来的语句也不会被执行；</p>
<blockquote>
<p>有一种情况，就是客车出发前，检查人数，有异常处理异常，但无论发不发生异常，客车都将出发</p>
</blockquote>
<p>自定义异常类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DangerException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String message=<span class="string">&quot;超员&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">warnMess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Bus类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> realPeople;</span><br><span class="line">    <span class="keyword">int</span> maxPeople;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxPeople</span><span class="params">(<span class="keyword">int</span> maxPeople)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxPeople = maxPeople;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loading</span><span class="params">(<span class="keyword">int</span> m)</span> <span class="keyword">throws</span> DangerException</span>&#123;</span><br><span class="line">        realPeople+=m;</span><br><span class="line">        <span class="keyword">if</span>(realPeople&gt;maxPeople)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DangerException();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;目前乘客一共：&quot;</span>+realPeople+<span class="string">&quot;人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>finally：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bus b =<span class="keyword">new</span> Bus();</span><br><span class="line">        b.setMaxPeople(<span class="number">55</span>);</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(m&lt;<span class="number">1000</span>) &#123;</span><br><span class="line">                b.loading(m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(DangerException e)&#123;</span><br><span class="line">            System.out.println(e.warnMess());</span><br><span class="line">            System.out.println(<span class="string">&quot;无法再拉乘客&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bus出发&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="五、断言语句"><a href="#五、断言语句" class="headerlink" title="五、断言语句"></a>五、断言语句</h2><p>断言语句主要用于调试代码；</p>
<h3 id="1、断言语句格式"><a href="#1、断言语句格式" class="headerlink" title="1、断言语句格式"></a>1、断言语句格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> booleanExpression;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> booleanExpression:messageException;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">    <span class="keyword">assert</span> number&gt;<span class="number">0</span>:<span class="string">&quot;负数不能计算平方根&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、断言语句详解"><a href="#2、断言语句详解" class="headerlink" title="2、断言语句详解"></a>2、断言语句详解</h3><p>a、断言语句的booleanExpression的值必须是boolean类型；messageException可以是值为字符串的表达式；</p>
<p>b、</p>
<table>
<thead>
<tr>
<th>assert booleanExpression;</th>
<th>assert booleanExpression:messageException;</th>
</tr>
</thead>
<tbody><tr>
<td>值为true，从断言语句处，继续执行</td>
<td>值为true，从断言语句处，继续执行</td>
</tr>
<tr>
<td>值为false，从断言语句处停止执行</td>
<td>值为false，从断言语句处停止执行，并输出messageException的值，提示用户</td>
</tr>
</tbody></table>
<p>c、当使用java解释器直接运行程序，默认关闭断言语句；</p>
<p>调试程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -ea mainclass.java</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">E:\code\src\day2&gt;java -ea Assert.java</span><br><span class="line">please input a number!</span><br><span class="line">-<span class="number">4</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.AssertionError: -number not be sqrt</span><br><span class="line">        at day2.Assert.main(Assert.java:<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有断言语句情况：</span></span><br><span class="line">E:\code\src\day2&gt;java -ea Assert.java</span><br><span class="line">please input a number!</span><br><span class="line">-<span class="number">4</span></span><br><span class="line">-<span class="number">4</span>is sqrt=NaN</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>枚举类与注解</title>
    <url>/2020/11/01/%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="一、枚举类"><a href="#一、枚举类" class="headerlink" title="一、枚举类"></a>一、枚举类</h2><p>类的对象有限个，确定的；</p>
<p>定义<strong>一组常量</strong>，建议是用枚举类；</p>
<h3 id="1、自定义枚举类"><a href="#1、自定义枚举类" class="headerlink" title="1、自定义枚举类"></a>1、自定义枚举类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">enum_C1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season spring=Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//1、声明类属性，用private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonDesc;</span><br><span class="line">    <span class="comment">//2、私有化构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String SeasonName,String SeasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.SeasonDesc=SeasonDesc;</span><br><span class="line">        <span class="keyword">this</span>.SeasonName=SeasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、提供当前枚举类的多个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Season SUMMER=<span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Season SPRING=<span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Season AUTUMN=<span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Season WINTER=<span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;白雪皑皑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他，获取枚举类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">getSeasonName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;SeasonName=&#x27;&quot;</span> + SeasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, SeasonDesc=&#x27;&quot;</span> + SeasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、使用JDK5-0新特性，enum创建枚举类"><a href="#2、使用JDK5-0新特性，enum创建枚举类" class="headerlink" title="2、使用JDK5.0新特性，enum创建枚举类"></a>2、使用JDK5.0新特性，enum创建枚举类</h3><blockquote>
<p>使用enum定义枚举类，默认继承java.lang.Enum</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum_C2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 autumn = Season1.AUTUMN;</span><br><span class="line">        System.out.println(autumn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;白雪皑皑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SeasonDesc;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String SeasonName,String SeasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.SeasonDesc=SeasonDesc;</span><br><span class="line">        <span class="keyword">this</span>.SeasonName=SeasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">getSeasonName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SeasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;SeasonName=&#x27;&quot;</span> + SeasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, SeasonDesc=&#x27;&quot;</span> + SeasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="a、和自定义枚举类的区别"><a href="#a、和自定义枚举类的区别" class="headerlink" title="a、和自定义枚举类的区别"></a>a、和自定义枚举类的区别</h4><p>枚举类对象的声明要在最前面。</p>
<p>省略相同部分，使代码看起来更简洁；</p>
<p><strong>枚举对象之前用  “，”隔开最后使用“；”</strong></p>
<h4 id="b、Enum类常用方法"><a href="#b、Enum类常用方法" class="headerlink" title="b、Enum类常用方法"></a>b、Enum类常用方法</h4><p>values()：返回枚举类型的对象数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Season1[] values=autumn.values();<span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (Season1 x:values) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>toString()：返回枚举类对象常量的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(autumn.toString());</span><br></pre></td></tr></table></figure>

<p>valuesOf()：把一个字符串，传换成枚举类对象。前提是，要求字符串必须是枚举类对象的名字，否则运行时会有异常；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(autumn.valueOf(<span class="string">&quot;AUTUMN&quot;</span>));</span><br></pre></td></tr></table></figure>





<h3 id="3、枚举类实现接口"><a href="#3、枚举类实现接口" class="headerlink" title="3、枚举类实现接口"></a>3、枚举类实现接口</h3><h4 id="a、在枚举类中实现抽象方法"><a href="#a、在枚举类中实现抽象方法" class="headerlink" title="a、在枚举类中实现抽象方法"></a>a、在枚举类中实现抽象方法</h4><blockquote>
<p>行为单一，调用任何枚举对象，都是相同的行为；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;枚举类中，实现抽象方法！！！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="b、在具体对象下实现抽象方法"><a href="#b、在具体对象下实现抽象方法" class="headerlink" title="b、在具体对象下实现抽象方法"></a>b、在具体对象下实现抽象方法</h4><blockquote>
<p>不同的对象有不同的行为，每个对象都重写抽象方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;白雪皑皑&quot;</span>)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<p>4、注解</p>
<p>a、JDK内置的三个注解</p>
<blockquote>
<p>@override，方法重写注解，只能用于方法；</p>
<p>会在编译时，校验该方法是否是重写；</p>
</blockquote>
<blockquote>
<p>@Deprecated,提示类或者方法已经过时</p>
<p>过时意味，该方法存在危险或者更好的选择</p>
</blockquote>
<blockquote>
<p>@SuppressWarnings，抑制编译器警告</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">int</span> m=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;unused&quot;,&quot;rawtypes&quot;&#125;)</span><span class="comment">//多个注解</span></span><br></pre></td></tr></table></figure>

<p>此时就不会提示感叹号，危险；不写抑制编译器警告注解，会警告遍历没有被私用；</p>
<p>b、自定义注解</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>运算符-表达式-语句</title>
    <url>/2020/11/01/%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="一、运算符与表达式"><a href="#一、运算符与表达式" class="headerlink" title="一、运算符与表达式"></a>一、运算符与表达式</h2><h3 id="1、算术运算符"><a href="#1、算术运算符" class="headerlink" title="1、算术运算符"></a>1、算术运算符</h3><p>二目运算符，操作元是整型或者浮点型</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>结合方式，优先级</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>从左到右，4</td>
</tr>
<tr>
<td>-</td>
<td>从左到右，4</td>
</tr>
<tr>
<td>*</td>
<td>从左到右，3</td>
</tr>
<tr>
<td>/</td>
<td>从左到右，3</td>
</tr>
<tr>
<td>%</td>
<td>从左到右，3</td>
</tr>
</tbody></table>
<h3 id="2、关系运算符"><a href="#2、关系运算符" class="headerlink" title="2、关系运算符"></a>2、关系运算符</h3><p>二目运算符</p>
<p>结果返回boolean型，true、false；</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>结合方式，优先级</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>从左到右，6</td>
</tr>
<tr>
<td>&lt;</td>
<td>从左到右，6</td>
</tr>
<tr>
<td>&gt;=</td>
<td>从左到右，6</td>
</tr>
<tr>
<td>&lt;=</td>
<td>从左到右，6</td>
</tr>
<tr>
<td>==</td>
<td>从左到右，7</td>
</tr>
<tr>
<td>!=</td>
<td>从左到右，7</td>
</tr>
</tbody></table>
<h3 id="3、逻辑运算符"><a href="#3、逻辑运算符" class="headerlink" title="3、逻辑运算符"></a>3、逻辑运算符</h3><p>二目运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>结合方式，优先级</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>从左到右，11</td>
</tr>
<tr>
<td>||</td>
<td>从左到右，12</td>
</tr>
<tr>
<td>！</td>
<td>从右到左，2</td>
</tr>
</tbody></table>
<p>🐖：逻辑或，当左第一个为真，不会进行第二个判断</p>
<h3 id="4、赋值运算符"><a href="#4、赋值运算符" class="headerlink" title="4、赋值运算符"></a>4、赋值运算符</h3><p>二目运算符</p>
<p>🐖：左边的操作元必须是变量，不能是常量或者表达式</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>结合方式，优先级</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>从右到左，14</td>
</tr>
</tbody></table>
<h3 id="5、位运算符"><a href="#5、位运算符" class="headerlink" title="5、位运算符"></a>5、位运算符</h3><table>
<thead>
<tr>
<th>&amp;</th>
<th>按位与，都是真为1，有假就是0</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>按位或，有真为1，都是假为0</td>
</tr>
<tr>
<td>^</td>
<td>对应位相同为0，否则为1</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000111</span><span class="comment">//(int)7</span></span><br><span class="line">    </span><br><span class="line"><span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111000</span><span class="comment">//(int)-8补码</span></span><br><span class="line">    </span><br><span class="line">a:<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000111</span></span><br><span class="line">b:<span class="number">10000001</span> <span class="number">10100101</span> <span class="number">11110011</span> <span class="number">10101011</span></span><br><span class="line">&amp;</span><br><span class="line"> :<span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000011</span></span><br></pre></td></tr></table></figure>

<p>🐖：原码：第一位为符号位，0为正数，1为负数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[+<span class="number">1</span>]原 = <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line"></span><br><span class="line">[-<span class="number">1</span>]原 = <span class="number">1000</span> <span class="number">0001</span></span><br></pre></td></tr></table></figure>

<pre><code>   反码：正数的反码为本身；**负数反码：符号位不变，其他取反；**</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[+<span class="number">1</span>] = [<span class="number">00000001</span>]原 = [<span class="number">00000001</span>]反</span><br><span class="line"></span><br><span class="line">[-<span class="number">1</span>] = [<span class="number">10000001</span>]原 = [<span class="number">11111110</span>]反</span><br></pre></td></tr></table></figure>

<p>​        补码：正数的补码为本身；<strong>负数补码：反码的基础上+1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[+<span class="number">1</span>] = [<span class="number">00000001</span>]原 = [<span class="number">00000001</span>]反 = [<span class="number">00000001</span>]补</span><br><span class="line"></span><br><span class="line">[-<span class="number">1</span>] = [<span class="number">10000001</span>]原 = [<span class="number">11111110</span>]反 = [<span class="number">11111111</span>]补</span><br></pre></td></tr></table></figure>



<h3 id="6、instanceof运算符"><a href="#6、instanceof运算符" class="headerlink" title="6、instanceof运算符"></a>6、instanceof运算符</h3><p>二目运算符，左边是一个对象，右边是一个类。当左边对象是右边的类或者子类创建的对象时，结果为true，否则为false</p>
<p>7、自增、自减运算符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x初始值为<span class="number">5</span></span><br><span class="line">y=++x;<span class="comment">//y=6</span></span><br><span class="line">y=x++;<span class="comment">//y=5</span></span><br></pre></td></tr></table></figure>

<h3 id="8、算数混合运算的精度"><a href="#8、算数混合运算的精度" class="headerlink" title="8、算数混合运算的精度"></a>8、算数混合运算的精度</h3><table>
<thead>
<tr>
<th>如果表达式中有双精度浮点数，按双精度进行运算</th>
<th>5.0/2+10=12.5</th>
</tr>
</thead>
<tbody><tr>
<td>如果表达式中最高精度是单精度浮点数，按单精度进行运算</td>
<td>5.0F/2+10=12.5F</td>
</tr>
<tr>
<td>如果表达式中最高精度是long型整数，按long类型进行运算</td>
<td>12L+1000+’a’=209L</td>
</tr>
<tr>
<td>如果表达式中最高精度低于int型整数，按int类型进行运算</td>
<td>(byte)10+’a’=107</td>
</tr>
</tbody></table>
<h2 id="二、条件分支语句"><a href="#二、条件分支语句" class="headerlink" title="二、条件分支语句"></a>二、条件分支语句</h2><h3 id="1、if语句"><a href="#1、if语句" class="headerlink" title="1、if语句"></a>1、if语句</h3><h3 id="2、if-else语句"><a href="#2、if-else语句" class="headerlink" title="2、if else语句"></a>2、if else语句</h3><h3 id="3、if-else-if-else语句"><a href="#3、if-else-if-else语句" class="headerlink" title="3、if else   if else语句"></a>3、if else   if else语句</h3><p>🐖：表达式语句必须时boolean类型</p>
<h3 id="4、switch语句"><a href="#4、switch语句" class="headerlink" title="4、switch语句"></a>4、switch语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>（表达式）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>：</span><br><span class="line">        若干语句</span><br><span class="line">        <span class="keyword">break</span>；</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>：</span><br><span class="line">        若干语句</span><br><span class="line">        <span class="keyword">break</span>；</span><br><span class="line">    <span class="keyword">default</span>：</span><br><span class="line">        若干语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：表达式中必须是：byte、short、int、char或者枚举类型</p>
<p>​        没有break会一直向下运行。</p>
<h2 id="三、循环语句"><a href="#三、循环语句" class="headerlink" title="三、循环语句"></a>三、循环语句</h2><h3 id="1、for循环"><a href="#1、for循环" class="headerlink" title="1、for循环"></a>1、for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>;表达式<span class="number">2</span>;表达式<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">	若干语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：执行顺序：表达式1–表达式2–若干语句—表达式3</p>
<p>​        表达式2必须是boolean类型的表达式</p>
<h3 id="2、while循环"><a href="#2、while循环" class="headerlink" title="2、while循环"></a>2、while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)&#123;</span><br><span class="line">    若干语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：执行顺序：表达式判断–循环体–表达式判断</p>
<h3 id="3、do…while语句"><a href="#3、do…while语句" class="headerlink" title="3、do…while语句"></a>3、do…while语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	若干语句</span><br><span class="line">&#125;<span class="keyword">while</span>(表达式)</span><br></pre></td></tr></table></figure>

<p>🐖：和while的区别就是会先执行一次</p>
<h3 id="4、break和continue语句"><a href="#4、break和continue语句" class="headerlink" title="4、break和continue语句"></a>4、break和continue语句</h3><p>break:遇到之后跳出循环</p>
<p>continue：跳过该条语句执行之后的循环，不跳出循环</p>
<h3 id="5、数组与for循环"><a href="#5、数组与for循环" class="headerlink" title="5、数组与for循环"></a>5、数组与for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">for_and_array</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] a= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x:a)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：输出语句中相比较于传统替代为临时容器</p>
<p>​        <strong>for(声明循环变量：数组名字)，其中声明循环变量不可以使用之前声明过的变量。</strong></p>
<p>6、枚举类型与for、switch语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">enum_for_switch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">		spring,summer,autumn,winter</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Season s;</span><br><span class="line">		<span class="keyword">for</span>(Season a:Season.values())</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(a);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(Season b:Season.values()) <span class="comment">//枚举类型取值，或者直接Season.summer</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">switch</span>(b) </span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">case</span> autumn:</span><br><span class="line">				System.out.println(<span class="string">&quot;autumn&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> winter:</span><br><span class="line">				System.out.println(<span class="string">&quot;winter&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> summer:</span><br><span class="line">				System.out.println(<span class="string">&quot;summer&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;spring&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>面向对象设计基本原则</title>
    <url>/2020/11/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h2 id="一、UML类图简介"><a href="#一、UML类图简介" class="headerlink" title="一、UML类图简介"></a>一、UML类图简介</h2><p>UML类图：是一个结构图，常用来描述一个系统的静态结构；</p>
<p>UML图组成：</p>
<p>类的UML图、接口的UML图、泛化关系UML图、关联关系UML图、依赖关系UML图、实现关系UML图；</p>
<h3 id="1、类的UML图"><a href="#1、类的UML图" class="headerlink" title="1、类的UML图"></a>1、类的UML图</h3><blockquote>
<p>分为三层；</p>
</blockquote>
<table>
<thead>
<tr>
<th>第一层类名，斜体表示抽象类，常规字体具体类；</th>
</tr>
</thead>
<tbody><tr>
<td>第二层变量层——属性层，列出类的成员变量及类型，格式：变量名字：类型，+表示public、#表示protected、-表示private，不加表示友好</td>
</tr>
<tr>
<td>第三层方法层，格式：方法名（形参泪飙）：类型，权限表示和变量层一样，<strong>特别的，方法是静态方法，在方法下面添加下划线</strong></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> z;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的类UML图：</p>
<img src="/2020/11/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/class_UML.png" class="">

<h3 id="2、接口的UML图"><a href="#2、接口的UML图" class="headerlink" title="2、接口的UML图"></a>2、接口的UML图</h3><p>第一层：接口名字必须是斜体；且要用《interface》修饰名字，两行</p>
<p>第二层：常量层用+修饰都是public</p>
<p>第三层：+修饰因为都是public</p>
<p>都应的UML图：</p>
<img src="/2020/11/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/2.png" class="">

<h3 id="3、泛化关系"><a href="#3、泛化关系" class="headerlink" title="3、泛化关系"></a>3、泛化关系</h3><p>所谓泛化关系就是：类的继承关系</p>
<p>用一个带箭头的直线表示：起始位置是子类，箭头位置是父类</p>
<p>UML图：</p>
<img src="/2020/11/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/3.png" class="">

<p>🐖：箭头是空心箭头，实心线；</p>
<h3 id="4、关联关系"><a href="#4、关联关系" class="headerlink" title="4、关联关系"></a>4、关联关系</h3><p>如果A类中的成员使用B类来声明的，A关联B，从A指向B</p>
<p>和泛化关系区别是：箭头是实心的，线是实心</p>
<h3 id="5、依赖关系"><a href="#5、依赖关系" class="headerlink" title="5、依赖关系"></a>5、依赖关系</h3><p>A类中，某个方法的参数使用B类声明的变量或者某个方法返回的数据类型是B类型的；</p>
<p>称为A依赖B，A指向B，系一条实心箭头，虚线</p>
<h3 id="6、实现关系"><a href="#6、实现关系" class="headerlink" title="6、实现关系"></a>6、实现关系</h3><p>实现关系：一个类实现某个接口</p>
<p>表示：虚线+空心箭头，虚线起始段是类，终点是接口；</p>
<h3 id="7、注释"><a href="#7、注释" class="headerlink" title="7、注释"></a>7、注释</h3><p>虚线连接注释实体</p>
<h2 id="二、面向对象原则"><a href="#二、面向对象原则" class="headerlink" title="二、面向对象原则"></a>二、面向对象原则</h2><h3 id="1、抽象类和接口"><a href="#1、抽象类和接口" class="headerlink" title="1、抽象类和接口"></a>1、抽象类和接口</h3><h4 id="a、抽象类"><a href="#a、抽象类" class="headerlink" title="a、抽象类"></a>a、抽象类</h4><p>抽象类可以有abstract方法，也可以有非abstract方法；</p>
<p>抽象类不能使用new创建对象；</p>
<p>如果一个非抽象类是某个抽象类的子类，必须重写父类抽象方法；</p>
<p><strong>做上转型对象；</strong></p>
<h4 id="b、接口"><a href="#b、接口" class="headerlink" title="b、接口"></a>b、接口</h4><p>接口可以有public权限的abstract方法，不能有非abstract方法；</p>
<p>一个类去实现一个接口，必须重写接口所有方法；</p>
<p><strong>接口回调；</strong></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/11/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>什么是多线程？</p>
<p>一个java程序都会默认有一个线程，当程序执行main方法，jvm启动一个主线程，mian方法创建了其他线程，就是多线程；</p>
<p>同时存在多个执行体，按几条不同的执行线索共同工作的情况；</p>
<p>并行和并发的区别？</p>
<p>并行，多个CPU处理多个程序；</p>
<p>并发，单核CPU处理多个程序；</p>
<blockquote>
<p>线程分为守护线程、用户线程</p>
</blockquote>
<h2 id="一、线程状态与生命周期"><a href="#一、线程状态与生命周期" class="headerlink" title="一、线程状态与生命周期"></a>一、线程状态与生命周期</h2><h3 id="1、新建状态"><a href="#1、新建状态" class="headerlink" title="1、新建状态"></a>1、新建状态</h3><p>线程对象创建后，进入新建状态；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread_extends t= <span class="keyword">new</span> thread_extends();</span><br></pre></td></tr></table></figure>



<h3 id="2、就绪状态"><a href="#2、就绪状态" class="headerlink" title="2、就绪状态"></a>2、就绪状态</h3><p>线程调用该对象的start方法之后，处于就绪状态，等待CPU执行该线程；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread_extends t= <span class="keyword">new</span> thread_extends();</span><br><span class="line">t.start();  <span class="comment">//线程就绪</span></span><br></pre></td></tr></table></figure>



<h3 id="3、运行状态"><a href="#3、运行状态" class="headerlink" title="3、运行状态"></a>3、运行状态</h3><p>线程获得资源，开始执行；</p>
<p>🐖：线程只能从就绪状态到运行状态；</p>
<h3 id="4、中断——阻塞状态"><a href="#4、中断——阻塞状态" class="headerlink" title="4、中断——阻塞状态"></a>4、中断——阻塞状态</h3><p>a、CPU资源从当前线程切换给其他线程，该线程处于阻塞状态；</p>
<p>b、线程使用CPU期间，执行了sleep(int millsecond)方法、是线程进入休眠状态；</p>
<p>c、线程使用CPU期间，执行wait()方法，使得当前线程进入等待状态——等待阻塞；</p>
<p>🐖、等待阻塞不会主动进入线程队列等待CPU资源、需要调用notify()方法或者notifyAll()方法；</p>
<p>d、同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。</p>
<p>e、线程使用CPU期间，调用读写操作；</p>
<h3 id="5、死亡"><a href="#5、死亡" class="headerlink" title="5、死亡"></a>5、死亡</h3><p>run方法执行完毕或者意外退出run方法；</p>
<h2 id="二、线程常用方法"><a href="#二、线程常用方法" class="headerlink" title="二、线程常用方法"></a>二、线程常用方法</h2><h3 id="1、线程命名"><a href="#1、线程命名" class="headerlink" title="1、线程命名"></a>1、线程命名</h3><h4 id="a、setName"><a href="#a、setName" class="headerlink" title="a、setName()"></a>a、setName()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread_extends t= <span class="keyword">new</span> thread_extends();</span><br><span class="line">t.setName(<span class="string">&quot;线程111&quot;</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure>



<h4 id="b、构造器"><a href="#b、构造器" class="headerlink" title="b、构造器"></a>b、构造器</h4><p>写一个构造器，调用父类构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread_extends(String name)&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明对象时，命名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread_extends t= <span class="keyword">new</span> thread_extends(<span class="string">&quot;线程111&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2、线程名获取"><a href="#2、线程名获取" class="headerlink" title="2、线程名获取"></a>2、线程名获取</h3><p>获取当前线程：currentThread()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">currentThread().getName()</span><br></pre></td></tr></table></figure>



<h3 id="3、yield"><a href="#3、yield" class="headerlink" title="3、yield()"></a>3、yield()</h3><p>释放当前线程的执行权；</p>
<p>🐖：可能刚释放又被重新分配，表面上可能并没有什么效果；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.yield();</span><br></pre></td></tr></table></figure>



<h3 id="4、join"><a href="#4、join" class="headerlink" title="4、join()"></a>4、join()</h3><p>线程占用CPU，执行完之后才会换其他线程</p>
<p>例：t,t2加入主线程之后，主线程暂停，当t，t2执行完，才会执行主线程；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;主线程：&quot;</span>+i);</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    t.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、sleep-int-毫秒"><a href="#5、sleep-int-毫秒" class="headerlink" title="5、sleep(int 毫秒)"></a>5、sleep(int 毫秒)</h3><p>线程睡眠，n秒钟之内线程不会被分配CPU</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sleep(<span class="number">1000</span>);<span class="comment">//阻塞一秒钟</span></span><br></pre></td></tr></table></figure>



<h3 id="6、isAlive"><a href="#6、isAlive" class="headerlink" title="6、isAlive()"></a>6、isAlive()</h3><p>判断线程是否存活；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象名.isAlive();</span><br></pre></td></tr></table></figure>



<h2 id="三、线程调度与优先级"><a href="#三、线程调度与优先级" class="headerlink" title="三、线程调度与优先级"></a>三、线程调度与优先级</h2><h3 id="1、线程优先等级"><a href="#1、线程优先等级" class="headerlink" title="1、线程优先等级"></a>1、线程优先等级</h3><p>MAX_PRORITY：10</p>
<p>MIN_PRORITY：1</p>
<p>NORM_PRORITY：5</p>
<h3 id="2、获取当前线程的优先级"><a href="#2、获取当前线程的优先级" class="headerlink" title="2、获取当前线程的优先级"></a>2、获取当前线程的优先级</h3><blockquote>
<p>getPriority()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象名.getPriority()</span><br></pre></td></tr></table></figure>



<h3 id="3、设置当前线程的优先级"><a href="#3、设置当前线程的优先级" class="headerlink" title="3、设置当前线程的优先级"></a>3、设置当前线程的优先级</h3><blockquote>
<p>setPriority(int 数)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象名.setPriority(<span class="keyword">int</span> 数);</span><br></pre></td></tr></table></figure>

<p>🐖：优先级只是优先级高，不保证一定先执行；设置线程优先级，最好在start之前；</p>
<h2 id="四、多线程实现方式"><a href="#四、多线程实现方式" class="headerlink" title="四、多线程实现方式"></a>四、多线程实现方式</h2><h3 id="1、继承Thread类"><a href="#1、继承Thread类" class="headerlink" title="1、继承Thread类"></a>1、继承Thread类</h3><p>重写run方法</p>
<h3 id="2、实现Runnable接口"><a href="#2、实现Runnable接口" class="headerlink" title="2、实现Runnable接口"></a>2、实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread_implements</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread_implements im=<span class="keyword">new</span> Thread_implements();</span><br><span class="line">        Thread t1 =<span class="keyword">new</span> Thread(im);</span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程：&quot;</span>+i+<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现步骤：</p>
<p>实现Runnable接口</p>
<p>重写run方法</p>
<p>创建对象，将对象传给Thread的构造方法</p>
<p>调用start方法；</p>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>🐖：多线程共享一个进程的堆、和方法区</p>
<p>​        <strong>wait()、notify()、notifyAll()属于Object类</strong></p>
<h3 id="3、内部类通过继承或者实现runnable接口实现多线程"><a href="#3、内部类通过继承或者实现runnable接口实现多线程" class="headerlink" title="3、内部类通过继承或者实现runnable接口实现多线程"></a>3、内部类通过继承或者实现runnable接口实现多线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">In_thread_extends</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Runnable接口&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="五、线程同步"><a href="#五、线程同步" class="headerlink" title="五、线程同步"></a>五、线程同步</h2><h3 id="1、加锁-同步代码块（接口）—"><a href="#1、加锁-同步代码块（接口）—" class="headerlink" title="1、加锁-同步代码块（接口）—"></a>1、加锁-同步代码块（接口）—</h3><blockquote>
<p>接口实现</p>
</blockquote>
<p>a、保证锁的唯一性，任何一个类对象都可以充当锁；锁——同步监视器</p>
<p>b、共享数据：多线程共同操作的变量；</p>
<p>c、synchronized要把操作共享数据的代码都包含，多线程必须公用同一把锁；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread_test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets=<span class="number">100</span>;</span><br><span class="line">    Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(obj)&#123;  <span class="comment">//最方便就是直接写个this</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出：&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                tickets--;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ticket win=<span class="keyword">new</span> ticket();</span><br><span class="line">        Thread w1=<span class="keyword">new</span> Thread(win);</span><br><span class="line">        Thread w2=<span class="keyword">new</span> Thread(win);</span><br><span class="line">        Thread w3=<span class="keyword">new</span> Thread(win);</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">	同步代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、优缺点："><a href="#2、优缺点：" class="headerlink" title="2、优缺点："></a>2、优缺点：</h3><p>优点：解决了线程安全的问题；</p>
<p>缺点：一个线程执行，另一个线程等待，效率低</p>
<h3 id="2、加锁-同步代码块（继承）"><a href="#2、加锁-同步代码块（继承）" class="headerlink" title="2、加锁-同步代码块（继承）"></a>2、加锁-同步代码块（继承）</h3><blockquote>
<p>继承实现多线程</p>
</blockquote>
<p>🐖：共享数据和锁要声明成静态的；</p>
<p>​        继承锁的对象不能是this，可以写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">window</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(windows.class)&#123;</span><br><span class="line">        同步代码块</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、同步方法——二"><a href="#3、同步方法——二" class="headerlink" title="3、同步方法——二"></a>3、同步方法——二</h3><blockquote>
<p>也有同步监视器，只是默认的，不需要显示声明；</p>
<p>非静态同步方法，同步监视器是this</p>
<p>静态同步方法，同步监视器是类本身；</p>
</blockquote>
<p>a、implements同步监视器就是this</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread_test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ticket_2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出：&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            tickets--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ticket win=<span class="keyword">new</span> ticket();</span><br><span class="line">        Thread w1=<span class="keyword">new</span> Thread(win);</span><br><span class="line">        Thread w2=<span class="keyword">new</span> Thread(win);</span><br><span class="line">        Thread w3=<span class="keyword">new</span> Thread(win);</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b、extends同步监视器：类.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ticket_2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tickets=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123; <span class="comment">//同步监视器就是ticket_2.class</span></span><br><span class="line">        <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出：&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            tickets--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ticket_2 w1 =<span class="keyword">new</span> ticket_2();</span><br><span class="line">        ticket_2 w2 =<span class="keyword">new</span> ticket_2();</span><br><span class="line">        ticket_2 w3 =<span class="keyword">new</span> ticket_2();</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：保证共享数据和共享方法是static</p>
<h3 id="4、线程死锁问题"><a href="#4、线程死锁问题" class="headerlink" title="4、线程死锁问题"></a>4、线程死锁问题</h3><p>a、死锁定义：两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day5;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer s1=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">        StringBuffer s2 =<span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">100</span>);<span class="comment">//增加死锁概率</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：出现死锁，不会出现提示，不会报错；</p>
<p>b、避免死锁</p>
<p>尽量减少同步资源的定义</p>
<p>尽量避免嵌套同步</p>
<p>专门的算法，原则</p>
<h3 id="5、解决线程安全问题——三"><a href="#5、解决线程安全问题——三" class="headerlink" title="5、解决线程安全问题——三"></a>5、解决线程安全问题——三</h3><p>ReentrantLock，jdk5.0新增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo_1;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//1、实例化ReentrantLock；</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock =<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets=<span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//2、调用lock方法</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tickets&gt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;卖出：第&quot;</span>+tickets+<span class="string">&quot;票&quot;</span>);</span><br><span class="line">                    tickets--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//解锁unlock</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Windows w =<span class="keyword">new</span> Windows();</span><br><span class="line">        Thread w1 =<span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread w2 =<span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread w3 =<span class="keyword">new</span> Thread(w);</span><br><span class="line">        w1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        w3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>synchronized和lock的异同</p>
</blockquote>
<p>1、相同点：都可以解决线程安全问题</p>
<p>2、synchronized自动调用解锁——释放同步代码块，lock手动调用解锁——更灵活</p>
<h2 id="六、线程通信"><a href="#六、线程通信" class="headerlink" title="六、线程通信"></a>六、线程通信</h2><blockquote>
<p>wait()方法：一旦执行此方法，就会进入阻塞状态，并释放同步监视器</p>
<p>notify()方法：唤醒wait()阻塞的线程，如果存在多个被wait的线程，先唤醒优先级较高的</p>
<p>notifyAll()方法：唤醒所有被wait的线程</p>
</blockquote>
<p>🐖：只能出现在同步代码块或者同步方法中；<strong>lock除外</strong></p>
<p>​        wait、notify、notifyAll是定义在java.lang.Object中的，所以任意一对象都有这三个方法；</p>
<p>实现线程通信，交互执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo_1;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets=<span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (tickets &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出：第&quot;</span> + tickets + <span class="string">&quot;票&quot;</span>);</span><br><span class="line">                    tickets++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread_Com</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//alt+shift+z包裹代码</span></span><br><span class="line">        Window w =<span class="keyword">new</span> Window();</span><br><span class="line">        Thread w1 =<span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread w2 =<span class="keyword">new</span> Thread(w);</span><br><span class="line">        w1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        w2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="sleep、wait的异同？"><a href="#sleep、wait的异同？" class="headerlink" title="sleep、wait的异同？"></a>sleep、wait的异同？</h3><p>相同点：一旦执行方法线程进入阻塞状态</p>
<p>不同点：声明的位置不同，sleep在Thread，wait在Object，sleep在哪都行，wait只能在同步代码块或者同步方法中</p>
<p>​            sleep不会释放锁，wait自动释放锁；</p>
<h2 id="七、JDK5-0创建线程新增方式"><a href="#七、JDK5-0创建线程新增方式" class="headerlink" title="七、JDK5.0创建线程新增方式"></a>七、JDK5.0创建线程新增方式</h2><h3 id="1、新增方式一，实现callable接口"><a href="#1、新增方式一，实现callable接口" class="headerlink" title="1、新增方式一，实现callable接口"></a>1、新增方式一，实现callable接口</h3><blockquote>
<p>实现call方法，有返回值</p>
<p>可以抛出异常</p>
<p>支持泛型</p>
<p>借助FutureTask类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、创建实现callable的接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//2、重写call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;i!=<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;被二整除的数：&quot;</span>+i);</span><br><span class="line">                count+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;<span class="comment">//count装箱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread_New_Callable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3、创建实现callable接口类的对象</span></span><br><span class="line">        Sum s=<span class="keyword">new</span> Sum();</span><br><span class="line">        <span class="comment">//4、将创建的对象传给futureTask的对象</span></span><br><span class="line">        FutureTask futertask =<span class="keyword">new</span> FutureTask(s);</span><br><span class="line">        <span class="comment">//5、futertask对象作为参数，传给Thread类</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futertask).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、如果有需要可以获取callable中call方法的返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object su=futertask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;总和为：&quot;</span>+su);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、新增方式二——线程池"><a href="#2、新增方式二——线程池" class="headerlink" title="2、新增方式二——线程池"></a>2、新增方式二——线程池</h3><p>背景：经常创建和销毁，使用量特别大的资源，并发中的线程对性能影响很大</p>
<p>思路：提前创建多个线程，放入线程池中，需要时直接取走使用，然后不用归还，实现重复利用。</p>
<p>好处：提高相应速度、降低资源消耗、便于线程管理</p>
<p>a、线程池属性管理</p>
<p>setCorePoolSize(15);//设置线程池属性，设置线程池大小<br>setKeepAliveTime(1, TimeUnit.SECONDS);//设置线程池属性，没有任务时，保持多长时间会中止(时间，时间单位)<br>setMaximumPoolSize(15);//设置线程池，最大线程数</p>
<p>b、线程池实现步骤</p>
<p>创建具有一定数量线程的线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService service= Executors.newFixedThreadPool(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>



<p>启动具体线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//2、适合实现Runnable接口的线程；</span></span><br><span class="line">service.submit(<span class="keyword">new</span> NumberThread1());<span class="comment">//2、适合实现callable接口的线程；</span></span><br></pre></td></tr></table></figure>



<p>关闭不用的线程，返还给线程池；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service.shutdown();<span class="comment">//3、关闭不用的线程，返还给线程池</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo_1;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;Runnable线程&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=<span class="number">50</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;i!=<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;Callable线程&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">50</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread_New_pool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建具有一定数量线程的线程池</span></span><br><span class="line">        ExecutorService service= Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        System.out.println(service.getClass());<span class="comment">//获取返回service的类</span></span><br><span class="line">        ThreadPoolExecutor service1= (ThreadPoolExecutor) service;</span><br><span class="line">        service1.setCorePoolSize(<span class="number">15</span>);<span class="comment">//设置线程池属性，设置线程池大小</span></span><br><span class="line">        service1.setKeepAliveTime(<span class="number">1</span>, TimeUnit.SECONDS);<span class="comment">//设置线程池属性，没有任务时，保持多长时间会中止(时间，时间单位)</span></span><br><span class="line">        service1.setMaximumPoolSize(<span class="number">15</span>);<span class="comment">//设置线程池，最大线程数</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//2、适合实现Runnable接口的线程；</span></span><br><span class="line">        service.submit(<span class="keyword">new</span> NumberThread1());<span class="comment">//2、适合实现callable接口的线程；</span></span><br><span class="line">        service.shutdown();<span class="comment">//3、关闭不用的线程，返还给线程池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>类与对象</title>
    <url>/2020/11/01/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="一、面向对象语言的特性"><a href="#一、面向对象语言的特性" class="headerlink" title="一、面向对象语言的特性"></a>一、面向对象语言的特性</h2><p>封装性、继承性、多态性</p>
<h2 id="二、类"><a href="#二、类" class="headerlink" title="二、类"></a>二、类</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>类是Java程序的基本要素；</p>
<p>类封装一类对象的状态和方法；</p>
<p>类是用来定义对象的模板；</p>
<p>类的实现，包括类的声明和类体；</p>
<h3 id="2、类的声明"><a href="#2、类的声明" class="headerlink" title="2、类的声明"></a>2、类的声明</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    类体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：类名要符合标识符规范；应遵守每个单词首字母大写风格。</p>
<h3 id="3、类体"><a href="#3、类体" class="headerlink" title="3、类体"></a>3、类体</h3><p>类体有两部分组成，变量声明——刻画属性 、方法的定义——刻画功能</p>
<h3 id="4、成员变量和局部变量"><a href="#4、成员变量和局部变量" class="headerlink" title="4、成员变量和局部变量"></a>4、成员变量和局部变量</h3><p>成员变量：类中声明的变量，有效范围整个类中。</p>
<p>成员变量分为类变量和实例变量，加static称为类变量，其他为实例变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> age;<span class="comment">//类变量</span></span><br><span class="line">    <span class="keyword">char</span> name;<span class="comment">//实例变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>局部变量：方法体中声明的变量和方法，方法内有效。</p>
<p>🐖：如果成员变量和局部变量名字相同，成员变量暂时隐藏，如果想要<strong>调用成员变量，使用this关键字</strong></p>
<h3 id="5、方法"><a href="#5、方法" class="headerlink" title="5、方法"></a>5、方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">返回值类型 方法名（形参列表）&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：方法名应遵循标识符规定；</p>
<p>编程规范：一个单词时，小写；多个单词时，第二单词开始首单词字母大写</p>
<h4 id="a、方法重载Overload"><a href="#a、方法重载Overload" class="headerlink" title="a、方法重载Overload"></a>a、方法重载Overload</h4><p>方法名相同；</p>
<p>方法的参数必须不同——参数个数不同、或参数类型不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getArea</span><span class="params">(<span class="keyword">float</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">3.14f</span>*r*r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getArea</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">float</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y,<span class="keyword">float</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x*x+y*y+z*z)*<span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：函数重载：方法的类型、参数名字不参与比较；</p>
<p>​        <strong>如果两个方法的名字相同、即使类型不同，也必须保证参数不同</strong></p>
<h4 id="b、构造方法"><a href="#b、构造方法" class="headerlink" title="b、构造方法"></a>b、构造方法</h4><p>名字必须与类名相同</p>
<p>没有返回值类型</p>
<p>可以被重载Overload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    A()&#123;        <span class="comment">//构造方法</span></span><br><span class="line">        方法体    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="c、类方法和实例方法"><a href="#c、类方法和实例方法" class="headerlink" title="c、类方法和实例方法"></a>c、类方法和实例方法</h4><p>类方法：方法类型前加static</p>
<p>实例方法：不加static</p>
<h4 id="d、常见问题"><a href="#d、常见问题" class="headerlink" title="d、常见问题"></a>d、常见问题</h4><p>对成员变量的操作只能放在方法中，方法可以对成员变量和局部变量进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">important</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">6</span>,c;  <span class="comment">//成员变量，，，不报错</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> b,d;<span class="comment">//类变量</span></span><br><span class="line">	a=<span class="number">5</span>;<span class="comment">//错误</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span>  <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		a=x;</span><br><span class="line">		System.out.println(<span class="string">&quot;实例方法输出：&quot;</span>+a);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		important k = <span class="keyword">new</span> important();</span><br><span class="line">		k.fun1(<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实例方法既能对类变量进行操作，也能对实例变量操作；类方法只能对类变量进行操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">important</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,c;  <span class="comment">//成员变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> b,d;<span class="comment">//类变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span>  <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		a=x;<span class="comment">//对成员变量进行操作</span></span><br><span class="line">		b=x;<span class="comment">//对类变量进行操作</span></span><br><span class="line">		System.out.println(<span class="string">&quot;成员变量a:&quot;</span>+a);</span><br><span class="line">		System.out.println(<span class="string">&quot;类变量b:&quot;</span>+b);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		a=y;<span class="comment">//对成员变量进行操作，报错</span></span><br><span class="line">		b=y;<span class="comment">//对类变量进行操作</span></span><br><span class="line">		System.out.println(<span class="string">&quot;成员变量a:&quot;</span>+a);<span class="comment">//报错</span></span><br><span class="line">		System.out.println(<span class="string">&quot;类变量b:&quot;</span>+b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		important k = <span class="keyword">new</span> important();</span><br><span class="line">		k.fun1(<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个类中的方法可以相互调用，实例方法可以调用该类的其他方法；类中的类方法只能调用该类的类方法，不能调用实例方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">important</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,c;  <span class="comment">//成员变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> b,d;<span class="comment">//类变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span>  <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		a=x;<span class="comment">//对成员变量进行操作</span></span><br><span class="line">		System.out.println(<span class="string">&quot;成员变量a:&quot;</span>+a);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">void</span>  <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> x1)</span> </span>&#123;</span><br><span class="line">		fun1(x1);</span><br><span class="line">		fun3(x1);<span class="comment">//不报错</span></span><br><span class="line">		c=x1;</span><br><span class="line">		System.out.println(<span class="string">&quot;成员变量c:&quot;</span>+c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		b=y;<span class="comment">//对类变量进行操作</span></span><br><span class="line">		System.out.println(<span class="string">&quot;类变量b:&quot;</span>+b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun4</span><span class="params">(<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		d=y2;</span><br><span class="line">		fun3(y2);</span><br><span class="line">		fun1(y2);<span class="comment">//报错</span></span><br><span class="line">		System.out.println(<span class="string">&quot;类变量d:&quot;</span>+d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		important k = <span class="keyword">new</span> important();</span><br><span class="line">		k.fun2(<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、对象"><a href="#三、对象" class="headerlink" title="三、对象"></a>三、对象</h2><h3 id="1、对象创建"><a href="#1、对象创建" class="headerlink" title="1、对象创建"></a>1、对象创建</h3><p>创建对象：对象声明、为对象分配内存</p>
<h4 id="a、对象声明"><a href="#a、对象声明" class="headerlink" title="a、对象声明"></a>a、对象声明</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    类名字  对象名;</span><br><span class="line">eg:</span><br><span class="line">	People song;</span><br></pre></td></tr></table></figure>

<h4 id="b、为声明的对象分配内存"><a href="#b、为声明的对象分配内存" class="headerlink" title="b、为声明的对象分配内存"></a>b、为声明的对象分配内存</h4><p>使用new运算符和<strong>类的构造方法</strong>为声明的对象分配内存=创建对象</p>
<p>🐖：如果类中没有构造方法，系统调用默认构造方法</p>
<p>​        构造方法是无参的，且方法体中没有语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">important k = <span class="keyword">new</span> important();</span><br></pre></td></tr></table></figure>

<p><em>important k = new important();</em></p>
<p><em>为important类中的成员变量分配内存空间；</em></p>
<p><em>执行构造方法中的语句。</em></p>
<p><em>如果成员变量声明时没有进行初始化，构造方法也没有对成员变量进行初始化操作，整型默认0，浮点型默认0.0，boolean型默认false，引用类型默认null</em></p>
<p>🐖：创建多个对象，会分配多个内存空间，同时返回一个引用给对象</p>
<h3 id="2、使用对象"><a href="#2、使用对象" class="headerlink" title="2、使用对象"></a>2、使用对象</h3><h4 id="a、对象操作自己的变量（对象的属性）"><a href="#a、对象操作自己的变量（对象的属性）" class="headerlink" title="a、对象操作自己的变量（对象的属性）"></a>a、对象操作自己的变量（对象的属性）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：对象.变量</span><br><span class="line">important k = <span class="keyword">new</span> important();</span><br><span class="line">k.a=<span class="number">6</span>;</span><br><span class="line">System.out.println(k.a);</span><br></pre></td></tr></table></figure>

<h4 id="b、对象调用类中的方法（对象的功能）"><a href="#b、对象调用类中的方法（对象的功能）" class="headerlink" title="b、对象调用类中的方法（对象的功能）"></a>b、对象调用类中的方法（对象的功能）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：对象.方法</span><br><span class="line">important k = <span class="keyword">new</span> important();</span><br><span class="line">k.fun2(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>🐖：对象调用方法时，方法中的局部变量被分配内存空间，方法执行完毕，局部变量即刻被释放</p>
<p>​        局部变量声明时如果没有被初始化，<strong>就没有默认值</strong>，因此使用局部变量之前，先对其初始化赋值；</p>
<h3 id="3、对象的引用和实体"><a href="#3、对象的引用和实体" class="headerlink" title="3、对象的引用和实体"></a>3、对象的引用和实体</h3><p>堆：一种运行时的数据结构，一个大的存储区域，支持动态的内存管理。</p>
<p>java的<strong>对象</strong>是在堆中分配内存；</p>
<p>对象的<strong>引用</strong>是在栈中分配内存</p>
<p>一个类创建两个对象，如果具有相同的引用，那么就具有相同的实体</p>
<p>使用空对象，程序在运行时，会出现异常NullPointerException</p>
<p>java编译器对空对象不做检查。</p>
<p><strong>垃圾回收机制：周期性检查某个实体是否已不被任何对象所拥有（引用），如果发现这样的实体，就释放实体占有的内存。</strong></p>
<h2 id="四、参数传值"><a href="#四、参数传值" class="headerlink" title="四、参数传值"></a>四、参数传值</h2><p>参数传值，参数得到的值是一个副本，不会影响“传值“变量的值；</p>
<h3 id="1、基本数据类型参数的传值"><a href="#1、基本数据类型参数的传值" class="headerlink" title="1、基本数据类型参数的传值"></a>1、基本数据类型参数的传值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> Width,Height;</span><br><span class="line">	<span class="keyword">double</span> Area;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(w&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			w=<span class="number">20</span>;   <span class="comment">//副本w值被改变</span></span><br><span class="line">			Width=w;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(w&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Height=w;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Width;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Width*Height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Rect re= <span class="keyword">new</span> Rect();</span><br><span class="line">		<span class="keyword">int</span> w=<span class="number">10</span>,h=<span class="number">20</span>;</span><br><span class="line">		re.setHeight(h);</span><br><span class="line">		re.setWidth(w);<span class="comment">//re.setWidth(&#x27;a&#x27;);允许</span></span><br><span class="line">		<span class="keyword">double</span> A=re.Area();</span><br><span class="line">		System.out.println(A);</span><br><span class="line">		System.out.println(w);<span class="comment">//值为10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：参数传递的值的级别不能高于该参数的级别</p>
<h3 id="2、引用类型参数的传值"><a href="#2、引用类型参数的传值" class="headerlink" title="2、引用类型参数的传值"></a>2、引用类型参数的传值</h3><p>引用类型传值，传递的是引用，而不是变量所引用的实体；引用改变，引用的实体就会发生改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamObject</span><span class="params">(<span class="keyword">boolean</span> flg, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flg = flg;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlg</span><span class="params">(<span class="keyword">boolean</span> flg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flg = flg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ParamObject&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;flg=&quot;</span> + flg +</span><br><span class="line">                <span class="string">&quot;, num=&quot;</span> + num +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParamsPassValue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">passObjectValue</span><span class="params">(ParamObject paramObject)</span> </span>&#123;</span><br><span class="line">        paramObject.setFlg(<span class="keyword">true</span>);</span><br><span class="line">        paramObject.setNum(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParamObject a = <span class="keyword">new</span> ParamObject(<span class="keyword">false</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        passObjectValue(a);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;　</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParamObject&#123;flg=<span class="keyword">false</span>, num=<span class="number">5</span>&#125;</span><br><span class="line">ParamObject&#123;flg=<span class="keyword">true</span>, num=<span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：与基本数据类型参数的传值不同的是：</p>
<p>对于引用类型参数传值，会将外部变量的引用地址，复制一份到方法的局部变量中，两个地址指向同一个对象，<strong>通过修改副本的引用值，修改了引用地址的对象，此时方法以外的引用此地址对象也会被修改。</strong></p>
<h3 id="3、可变参数"><a href="#3、可变参数" class="headerlink" title="3、可变参数"></a>3、可变参数</h3><p>不给出具体的参数名字和参数个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Area</span><span class="params">(<span class="keyword">double</span> area,<span class="keyword">int</span> ...x)</span></span>;</span><br></pre></td></tr></table></figure>

<p>🐖：省略参数个数和具体每个参数的名字，类型必须保持一致</p>
<p>​        参数代表可以用参数下标表示具体的参数，x[0]、x[1]分别表示第一个参数和第二个参数；</p>
<p>​        参数个数x.length</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//平均数计算</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> ...x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">double</span> result=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//传统遍历</span></span><br><span class="line"><span class="comment">//		for(int i=0;i&lt;x.length;i++)</span></span><br><span class="line"><span class="comment">//		&#123;</span></span><br><span class="line"><span class="comment">//			sum=sum+x[i];</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">        <span class="comment">//for-each遍历</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> y:x)</span><br><span class="line">		&#123;</span><br><span class="line">			sum=sum+y;</span><br><span class="line">		&#125;</span><br><span class="line">		result=sum*a;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：也可用for-each对可变参数列表进行遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Computer com=<span class="keyword">new</span> Computer();</span><br><span class="line">		<span class="keyword">double</span> re=com.getResult(<span class="number">1.0</span>/<span class="number">3</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);  <span class="comment">//参数数量可变</span></span><br><span class="line">		System.out.println(<span class="string">&quot;三个整数的平均数：&quot;</span>+re);</span><br><span class="line">		<span class="keyword">double</span> re1=com.getResult(<span class="number">1.0</span>/<span class="number">5</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//参数数量可变</span></span><br><span class="line">		System.out.println(<span class="string">&quot;三个整数的平均数：&quot;</span>+re1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、对象的组合"><a href="#五、对象的组合" class="headerlink" title="五、对象的组合"></a>五、对象的组合</h2><p>一个类把对象作为自己的成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    类体</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">    类体</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geometry</span></span>&#123;</span><br><span class="line">    Circle ce;</span><br><span class="line">    Rectangle re;</span><br><span class="line">    Geometry(Circle ce,Rectangle re)<span class="comment">//类对象作为对象，即圆锥有一个圆底</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ce=ce;</span><br><span class="line">        <span class="keyword">this</span>.re=re;</span><br><span class="line">    &#125;</span><br><span class="line">    ...set、get方法对ce.对象,re.对象对象进行操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、static关键字"><a href="#六、static关键字" class="headerlink" title="六、static关键字"></a>六、static关键字</h2><h3 id="1、实例变量和类变量的区别"><a href="#1、实例变量和类变量的区别" class="headerlink" title="1、实例变量和类变量的区别"></a>1、实例变量和类变量的区别</h3><p>static修饰的变量称为类变量；static修饰的成员方法叫类方法</p>
<p>类方法又叫静态方法</p>
<p>类变量，创建多个对象，只分配一处内存空间；实例变量创建多个对象，分配多个内存空间</p>
<p>实例变量分配内存情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">object</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		object o1=<span class="keyword">new</span> object();</span><br><span class="line">		object o2=<span class="keyword">new</span> object();</span><br><span class="line">		o1.x=<span class="number">6</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;o1:&quot;</span>+o1.x);</span><br><span class="line">		System.out.println(<span class="string">&quot;o2:&quot;</span>+o2.x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//o1:6</span></span><br><span class="line"><span class="comment">//o2:0</span></span><br></pre></td></tr></table></figure>

<p>类变量分配内存情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">object</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		object o1=<span class="keyword">new</span> object();</span><br><span class="line">		object o2=<span class="keyword">new</span> object();</span><br><span class="line">		o1.x=<span class="number">6</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;o1:&quot;</span>+o1.x);</span><br><span class="line">		System.out.println(<span class="string">&quot;o2:&quot;</span>+o2.x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//o1:6</span></span><br><span class="line"><span class="comment">//o2:6</span></span><br></pre></td></tr></table></figure>

<p>类的字节码文件被加载到内存，如果该类没有创建对象，类中实例变量不会分配内存空间；类中的类变量会分配内存空间；</p>
<p><strong>类变量的内存空间，直到程序运行结束，才释放所占有的内存</strong></p>
<p>类变量，可以通过某个类对象访问，也可以通过类名访问</p>
<h3 id="2、实例方法和类方法的区别"><a href="#2、实例方法和类方法的区别" class="headerlink" title="2、实例方法和类方法的区别"></a>2、实例方法和类方法的区别</h3><table>
<thead>
<tr>
<th>类方法</th>
<th>实例方法</th>
</tr>
</thead>
<tbody><tr>
<td>static修饰</td>
<td>无</td>
</tr>
<tr>
<td>可以用.运算符访问</td>
<td>可以用.运算符访问</td>
</tr>
<tr>
<td>字节码加载内存时，分配相应的入口地址</td>
<td>字节码加载到内存时，不创建对象就不会分配入口地址，第一个对象创建时，分配入口地址，之后再创建不会再分配；</td>
</tr>
<tr>
<td>类方法不可以调用实例变量和实例方法</td>
<td>可以</td>
</tr>
<tr>
<td>程序退出，方法入口取消</td>
<td>所有的对象都不存在，方法入口才会被取消</td>
</tr>
<tr>
<td>类对象、类名访问</td>
<td>类对象访问，原因是第三个</td>
</tr>
</tbody></table>
<p>🐖：如果一个方法不需要操作实例变量就可以实现某种功能，可以将其设置为类方法。避免创建对象浪费内存；</p>
<h2 id="七、this关键字"><a href="#七、this关键字" class="headerlink" title="七、this关键字"></a>七、this关键字</h2><p>可以出现在实例方法和构造方法中，但是<strong>不能出现在类方法中</strong></p>
<h3 id="1、在构造方法中使用this"><a href="#1、在构造方法中使用this" class="headerlink" title="1、在构造方法中使用this"></a>1、在构造方法中使用this</h3><p>this关键字出现在类的构造方法中时，代表使用该构造方法所创建的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> leg,hand;</span><br><span class="line">	String name;</span><br><span class="line">	People(String s)</span><br><span class="line">	&#123;</span><br><span class="line">		name =s;</span><br><span class="line">		<span class="keyword">this</span>.init();<span class="comment">//可以省略this</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		leg=<span class="number">2</span>;</span><br><span class="line">		hand=<span class="number">2</span>;</span><br><span class="line">		System.out.println(name+<span class="string">&quot;有&quot;</span>+hand+<span class="string">&quot;只手&quot;</span>+leg+<span class="string">&quot;条腿&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		People p=<span class="keyword">new</span> People(<span class="string">&quot;litchi&quot;</span>);<span class="comment">//创建p时，构造方法中的this就是对象p</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、在实例方法中使用this"><a href="#2、在实例方法中使用this" class="headerlink" title="2、在实例方法中使用this"></a>2、在实例方法中使用this</h3><p>实例成员变量在实例方法中，默认格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量</span><br></pre></td></tr></table></figure>

<p>类变量，即static成员变量在实例方法中，默认格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名.成员变量</span><br></pre></td></tr></table></figure>

<p>🐖：通常情况下可以省略this和类名</p>
<p>​        当实例成员变量和局部变量的名字相同，成员变量前的this和类名不能省略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">        g();<span class="comment">//省略this</span></span><br><span class="line">        h();<span class="comment">//省略类名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、包"><a href="#八、包" class="headerlink" title="八、包"></a>八、包</h2><p>为什么要有包？</p>
<p>区分不同java源文件相同类名的类</p>
<h3 id="1、运行带有包名的主类"><a href="#1、运行带有包名的主类" class="headerlink" title="1、运行带有包名的主类"></a>1、运行带有包名的主类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tom;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Student stu =<span class="keyword">new</span> Student(<span class="number">1234</span>);</span><br><span class="line">		stu.speak();</span><br><span class="line">		System.out.println(<span class="string">&quot;主类包名也是tom&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tom;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number;</span><br><span class="line">	Student(<span class="keyword">int</span> n)&#123;</span><br><span class="line">		number=n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Student类的包名是tom，我的学号：&quot;</span>+number);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\elipse_file\Java基础\src&gt;javac tom\Student.java</span><br><span class="line"></span><br><span class="line">E:\elipse_file\Java基础\src&gt;javac tom\demo.java</span><br><span class="line"></span><br><span class="line">E:\elipse_file\Java基础\src&gt;java tom.demo</span><br><span class="line">Student类的包名是tom，我的学号：1234</span><br><span class="line">主类包名也是tom</span><br></pre></td></tr></table></figure>

<p>🐖：java语言不允许使用java作为包名的一部分，例如java.tom是不合法的</p>
<p>​        package语句是java源文件的第一条语句</p>
<h2 id="九、import语句"><a href="#九、import语句" class="headerlink" title="九、import语句"></a>九、import语句</h2><p>作用：一个类可能需要另一个类声明的对象作为自己的成员变量或方法中的局部变量；同一个包中直接用，不同包中使用import</p>
<p>🐖：类没有包名，放在同一个文件夹就是属于一个包</p>
<h3 id="1、引入类库中的类"><a href="#1、引入类库中的类" class="headerlink" title="1、引入类库中的类"></a>1、引入类库中的类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sql；<span class="comment">//包含数据库的类</span></span><br><span class="line"><span class="keyword">import</span> java.until.*;<span class="comment">//引入包中所有的类</span></span><br></pre></td></tr></table></figure>

<p>🐖：系统自动引入java.lang包中的类</p>
<p><strong>import引入包中的类，只会增加编译时间，不会影响程序性能，程序执行时，只会将用户用的的类的字节码加载到内存</strong></p>
<h3 id="2、引入自定义包中的类"><a href="#2、引入自定义包中的类" class="headerlink" title="2、引入自定义包中的类"></a>2、引入自定义包中的类</h3><p>a、修改classpath的值</p>
<p>如果tom包在E:\src下，对应的目录结构是E:\src\tom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set classpath&#x3D;C:\jdk1.7\jre\lib\rt.jar;.;E:\src</span><br></pre></td></tr></table></figure>

<p>🐖：.;表示可以加载当前应用程序当前目录中的无包名类</p>
<p>b、用户程序下简历和包相对应的目录结构</p>
<p>如：程序某个类所在的目录是E:\demo，想引入tom包中的类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">建立如下目录结构：</span><br><span class="line">E:\demo\tom</span><br></pre></td></tr></table></figure>

<h3 id="3、引入无包名类"><a href="#3、引入无包名类" class="headerlink" title="3、引入无包名类"></a>3、引入无包名类</h3><p>将无包名类的类的字节码和当前类保存在同一目录中即可</p>
<h3 id="4、避免类名混淆"><a href="#4、避免类名混淆" class="headerlink" title="4、避免类名混淆"></a>4、避免类名混淆</h3><p>在源文件中，使用一个类，只要不引起混淆，就可以省略包名。</p>
<p>但有些情况下，不能省略：</p>
<h4 id="a、区分无包名和有包名的类"><a href="#a、区分无包名和有包名的类" class="headerlink" title="a、区分无包名和有包名的类"></a>a、区分无包名和有包名的类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tom.jiafei.A;</span><br></pre></td></tr></table></figure>

<p>使用A类，如果省略包名，那么源文件使用的是tom.jiafei包中的A类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a1 = <span class="keyword">new</span> A();</span><br><span class="line">tom.jiafei.A a2 =<span class="keyword">new</span> tom.jiafei.A();</span><br></pre></td></tr></table></figure>

<p><strong>a1是有包名A类创建的对象，a2是tom.jiafei包中A类创建的对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tom.jiafei.*;</span><br></pre></td></tr></table></figure>

<p>使用A类，省略包名，那么源文件使用的是无名包类的A类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a1 = <span class="keyword">new</span> A();</span><br><span class="line">tom.jiafei.A a2 =<span class="keyword">new</span> tom.jiafei.A();</span><br></pre></td></tr></table></figure>

<p><strong>a1是无名包A类创建的对象，a2是tom.jiafei包中A类创建的对象</strong></p>
<h4 id="b、区分有包名类"><a href="#b、区分有包名类" class="headerlink" title="b、区分有包名类"></a>b、区分有包名类</h4><p>如果一个源文件引入两个包中同名类，<strong>不允许省略包名</strong></p>
<h2 id="十、访问权限"><a href="#十、访问权限" class="headerlink" title="十、访问权限"></a>十、访问权限</h2><p>🐖：一个类中的实例方法总是可以操作该类的实例变量和类变量，类方法总是可以操作该类的类变量，与访问限制符没有关系</p>
<h3 id="1、private私有变量和私有方法"><a href="#1、private私有变量和私有方法" class="headerlink" title="1、private私有变量和私有方法"></a>1、private私有变量和私有方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> weight;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当另一个类用类Tom创建对象，不能访问私有变量和私有方法；<strong>只有本类可以访问</strong></p>
<p>🐖：当不希望对象可以直接访问变量——“.”运算符直接操作，应当声明为privat，然后使用set、get方法；</p>
<h3 id="2、public公有变量和共有方法"><a href="#2、public公有变量和共有方法" class="headerlink" title="2、public公有变量和共有方法"></a>2、public公有变量和共有方法</h3><p>直接调用，不受限制；<strong>同一个包中，直接使用，不同包，引入后使用</strong></p>
<h3 id="3、友好变量和友好方法"><a href="#3、友好变量和友好方法" class="headerlink" title="3、友好变量和友好方法"></a>3、友好变量和友好方法</h3><p>不用private、public、protect修饰符修饰的成员变量和方法称为友好变量和友好方法</p>
<p>同一包中，不同可以访问友好变量和友好方法；</p>
<p><strong>不同包，通过import引入类，不能访问友好变量和友好方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">        A a</span>=<span class="keyword">new</span> A();</span><br><span class="line">    	a.show();<span class="comment">//合法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ...A;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">        A a</span>=<span class="keyword">new</span> A();</span><br><span class="line">    	a.show();<span class="comment">//非法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、protected受保护的成员变量和方法"><a href="#4、protected受保护的成员变量和方法" class="headerlink" title="4、protected受保护的成员变量和方法"></a>4、protected受保护的成员变量和方法</h3><p>存在子类时：受保护成员变量和方法和友好成员变量和方法有区别</p>
<p>子类可以继承protected成员变量和方法，但是不能继承友好成员变量和方法</p>
<h3 id="5、public类与友好类"><a href="#5、public类与友好类" class="headerlink" title="5、public类与友好类"></a>5、public类与友好类</h3><p>用public修饰的class叫public类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有修饰的class叫友好类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class People&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>另一个类中使用友好类创建对象时，保证在一个包中；</em></p>
<p>🐖：<strong>不能用private、protected修饰类；</strong></p>
<p>​        <strong>访问权限从高到底：public、protected、private</strong></p>
<h2 id="十一、基本数据类型的类封装"><a href="#十一、基本数据类型的类封装" class="headerlink" title="十一、基本数据类型的类封装"></a>十一、基本数据类型的类封装</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>类封装</th>
<th>返回该对象数据类型的方法</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte类</td>
<td>byteValue()</td>
</tr>
<tr>
<td>int</td>
<td>Integer类</td>
<td>intValue()</td>
</tr>
<tr>
<td>short</td>
<td>Short类</td>
<td>shortValue()</td>
</tr>
<tr>
<td>long</td>
<td>Long类</td>
<td>longValue()</td>
</tr>
<tr>
<td>float</td>
<td>Float类</td>
<td>floatValue()</td>
</tr>
<tr>
<td>double</td>
<td>Double类</td>
<td>doubleValue()</td>
</tr>
<tr>
<td>char</td>
<td>Character类</td>
<td>charValue()</td>
</tr>
</tbody></table>
<p>Character类中封装了一些类方法，直接用类名调用：</p>
<table>
<thead>
<tr>
<th>public static boolean isDigit(char ch)</th>
<th>判断ch是否为数字，是返回true、不是返回false</th>
</tr>
</thead>
<tbody><tr>
<td>public static boolean isLetter(char ch)</td>
<td>判断是否是字母</td>
</tr>
<tr>
<td>public static boolean isLetterOrDigit(char ch)</td>
<td>判断是数字或字母</td>
</tr>
<tr>
<td>public static boolean isLowerCase(char ch)</td>
<td>判断是否是小写字母</td>
</tr>
<tr>
<td>public static boolean isUpperCase(char ch)</td>
<td>判断是否是大写字母</td>
</tr>
<tr>
<td>public static boolean toLowerCase(char ch)</td>
<td>返回小写字母</td>
</tr>
<tr>
<td>public static boolean toUpperCase(char ch)</td>
<td>返回大写字母</td>
</tr>
<tr>
<td>public static boolean isSpaceChar(char ch)</td>
<td>判断是否为空格</td>
</tr>
</tbody></table>
<h3 id="1、自动装箱和拆箱"><a href="#1、自动装箱和拆箱" class="headerlink" title="1、自动装箱和拆箱"></a>1、自动装箱和拆箱</h3><p>自动装箱：允许基本数据类型的值直接赋给基本数据类型相对应的类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer number = <span class="number">100</span>;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">int</span> m =<span class="number">100</span>;</span><br><span class="line">Integer number=m;</span><br></pre></td></tr></table></figure>

<p>上述装箱过程相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer number = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>自动拆箱：允许基本数据类型相对应的类的实例直接赋值给<strong>相应的</strong>基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">number是Integer类型</span><br><span class="line"><span class="keyword">int</span> x =number+number;</span><br></pre></td></tr></table></figure>

<p>上述拆箱过程相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x =number.intValue()+number.intValue();</span><br></pre></td></tr></table></figure>

<p>🐖：自动装箱和自动拆箱只是形式上的变化，性能并没有提高；</p>
<p>​        装箱和拆箱必须保证对应类型一致</p>
<p>特别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Float c =<span class="number">12</span>;<span class="comment">//错误</span></span><br><span class="line"></span><br><span class="line">Float c = <span class="keyword">new</span> Float(<span class="number">12</span>);<span class="comment">//对的</span></span><br></pre></td></tr></table></figure>



<h2 id="十二、反编译和文件生成器"><a href="#十二、反编译和文件生成器" class="headerlink" title="十二、反编译和文件生成器"></a>十二、反编译和文件生成器</h2><h3 id="1、使用反编译器"><a href="#1、使用反编译器" class="headerlink" title="1、使用反编译器"></a>1、使用反编译器</h3><p>JDK提供的反编译器：javap.exe可以将字节码反编译为源码；</p>
<p>查看源码<strong>类中public</strong>方法和成员变量的名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javap java.util.Date</span><br></pre></td></tr></table></figure>

<p>查看JButton<strong>全部</strong>方法和变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javap privae javax.swing.JButton</span><br></pre></td></tr></table></figure>



<h3 id="2、使用文件生成器"><a href="#2、使用文件生成器" class="headerlink" title="2、使用文件生成器"></a>2、使用文件生成器</h3><p>使用JDK提供的javadoc.exe制作HTML格式文档</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">假如有demo.java文件</span><br><span class="line">javadoc demo.java      <span class="comment">//生成若干个HTML文档</span></span><br></pre></td></tr></table></figure>

<p>指定目录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javadoc -d C:\document demo.java <span class="comment">//在C:\document下生成HTML文档</span></span><br></pre></td></tr></table></figure>

<p>使用javadoc注释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 注释内容 *&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@para 参数说明</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@return 文字说明</span><br></pre></td></tr></table></figure>



<h2 id="十三、JAR文件"><a href="#十三、JAR文件" class="headerlink" title="十三、JAR文件"></a>十三、JAR文件</h2><p>使用 jar.exe命令把一些字节码文件生成JAR文件</p>
<h3 id="1、有包名的类"><a href="#1、有包名的类" class="headerlink" title="1、有包名的类"></a>1、有包名的类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tom;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number;</span><br><span class="line">	Student(<span class="keyword">int</span> n)&#123;</span><br><span class="line">		number=n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Student类的包名是tom，我的学号：&quot;</span>+number);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tom;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;有包名类！！！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a、编译两个java文件，生成*.class文件；</p>
<p>b、编写hello.mf清单文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Class: tom.demo tom.Student</span><br><span class="line">Created-By: 1.7</span><br></pre></td></tr></table></figure>

<p>c、生成JAR文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar cfm test.jar hello.mf tom\demo.class tom\Student.class</span><br></pre></td></tr></table></figure>

<p>文件夹下只有demo.class和Student.class</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar cfm test.jar hello.mf tom\*.class</span><br></pre></td></tr></table></figure>

<p>d、将生成的jar文件复制到JDK安装目录下的jre\lib\ext文件夹中；</p>
<p>使用import引入：即可使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tom.*;</span><br></pre></td></tr></table></figure>

<p>🐖：清单文件，冒号之后有且必须只能有一个空格；</p>
<p>清单文件保存在class文件的上一级文件中；本例保存在E:\demo中</p>
<h3 id="2、无包名的类"><a href="#2、无包名的类" class="headerlink" title="2、无包名的类"></a>2、无包名的类</h3><p>与有包名的类区别：</p>
<p>a、字节码文件和mf文件放在一起执行jar命令生成jar；<strong>mf文件中class处的包名要去掉</strong></p>
<p>b、生成的jar文件保存到jre\lib\ext文件夹中，不用使用import即可直接使用</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>继承与接口</title>
    <url>/2020/11/01/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="继承与接口"><a href="#继承与接口" class="headerlink" title="继承与接口"></a>继承与接口</h1><h2 id="一、子类与父类"><a href="#一、子类与父类" class="headerlink" title="一、子类与父类"></a>一、子类与父类</h2><p>继承是一种由已有类创建新类的机制；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="title">exends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A叫子类，B叫父类或者超类；</p>
<p>🐖：如果一个类没有extends，那么默认继承Object类，Object是java.lang包中的类；</p>
<h2 id="二、子类的继承性"><a href="#二、子类的继承性" class="headerlink" title="二、子类的继承性"></a>二、子类的继承性</h2><p>所谓子类继承父类，就是被继承的成员变量和方法可以被子类任何实例方法调用；</p>
<p>如果不能操作父类的成员变量和方法，那么该成员变量和方法就没有被继承；</p>
<h3 id="1、子类和父类在同一个包中的继承性"><a href="#1、子类和父类在同一个包中的继承性" class="headerlink" title="1、子类和父类在同一个包中的继承性"></a>1、子类和父类在同一个包中的继承性</h3><p><strong>子类自然的继承父类中不是private</strong>的成员变量和方法；</p>
<p>继承的成员变量和方法，访问权限保持不变；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2、子类和父类不在同一个包中的继承性"><a href="#2、子类和父类不在同一个包中的继承性" class="headerlink" title="2、子类和父类不在同一个包中的继承性"></a>2、子类和父类不在同一个包中的继承性</h3><p>子类自然继承父类的<strong>protected、public</strong>成员变量和方法；</p>
<p>继承的成员变量和方法，访问权限保持不变；</p>
<p>🐖：不能继承友好成员变量和成员方法，就是没有权限修饰符修饰的成员变量和方法；</p>
<h3 id="3、protected详解"><a href="#3、protected详解" class="headerlink" title="3、protected详解"></a>3、protected详解</h3><p>一个类中的protected成员变量和方法可以被他的直接子类或者间接子类继承；</p>
<p>D继承C，C继承B，B继承A；</p>
<p>如果一个Other类，用D类创建了对象object，该对象通过“.”运算符访问protected变量和方法权限如下：</p>
<p>a、对于子类D声明的protected成员变量和方法，object要访问，只需要D和Other类在同一个包中</p>
<p>b、对于子类D继承的protected成员变量和方法，object要访问，Other类要和被继承的protected成员变量和方法的“祖先”类在同一个包中</p>
<p>🐖：祖先类就是找到protected成员变量和方法的源头就行，不需要是最顶层的父类；</p>
<h2 id="三、子类对象的构造过程"><a href="#三、子类对象的构造过程" class="headerlink" title="三、子类对象的构造过程"></a>三、子类对象的构造过程</h2><p>用子类构造方法创建一个子类的对象时，子类构造方法总是先调用父类的某个构造方法——构造方法可以重载；</p>
<p>父类的private成员变量和方法，也被分配了内存空间；</p>
<p>子类和父类不在同一个包中，友好成员变量和方法也被分配内存空间；</p>
<p>好像是浪费内存空间？</p>
<p>子类继承了父类的方法，有一部分方法可以操作这些未被继承的变量，，，比如set、get方法</p>
<h2 id="四、成员变量的隐藏和方法重写（override）"><a href="#四、成员变量的隐藏和方法重写（override）" class="headerlink" title="四、成员变量的隐藏和方法重写（override）"></a>四、成员变量的隐藏和方法重写（override）</h2><h3 id="1、成员变量的隐藏"><a href="#1、成员变量的隐藏" class="headerlink" title="1、成员变量的隐藏"></a>1、成员变量的隐藏</h3><p>所谓隐藏：子类成员变量和父类成员变量同名，父类成员变量就被隐藏了</p>
<p>🐖：被隐藏的父类成员变量，可以通过从父类继承来的方法去进行操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tom;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">double</span> x;  <span class="comment">//父类x</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		x=a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tom;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x;<span class="comment">//隐藏父类成员变量x</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//x=20.0;//非法</span></span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tom;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Stu st =<span class="keyword">new</span> Stu();</span><br><span class="line">		st.x=<span class="number">99</span>;<span class="comment">//合法</span></span><br><span class="line">		st.x=<span class="number">21.2</span>;<span class="comment">//非法</span></span><br><span class="line">		st.setX(<span class="number">12.2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、方法重写Overide"><a href="#2、方法重写Overide" class="headerlink" title="2、方法重写Overide"></a>2、方法重写Overide</h3><h4 id="a、重写规则"><a href="#a、重写规则" class="headerlink" title="a、重写规则"></a>a、重写规则</h4><p>通过方法重写，可以隐藏继承的实例方法；</p>
<p><strong>重写</strong>：方法名字、参数个数、参数类型和父类完全一致；</p>
<p><strong>返回值类型可以不一致</strong>（JDK1.5之后），允许重写方法的类型是父类方法的<strong>子类型</strong></p>
<p>能够被继承的方法，就能被重写</p>
<h4 id="b、重写的目的"><a href="#b、重写的目的" class="headerlink" title="b、重写的目的"></a>b、重写的目的</h4><p>重写之后，调用方法，调用的是重写之后的方法，<strong>如果想使用被隐藏的方法，使用super关键字</strong></p>
<p>隐藏继承的方法，把父类的状态重写为自己的状态和行为</p>
<h4 id="c、重写注意事项"><a href="#c、重写注意事项" class="headerlink" title="c、重写注意事项"></a>c、重写注意事项</h4><p>重写父类方法时，不可以降低方法的访问权限；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">float</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span> <span class="comment">//非法，降低了方法的访问权限</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span> <span class="comment">//合法，提高了访问权限</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、super关键字"><a href="#五、super关键字" class="headerlink" title="五、super关键字"></a>五、super关键字</h2><p>子类可以隐藏从父类继承的成员变量和方法，如果在子类中想使用被子类隐藏的成员变量和方法，可以使用super关键字</p>
<h3 id="1、使用super调用父类的构造方法"><a href="#1、使用super调用父类的构造方法" class="headerlink" title="1、使用super调用父类的构造方法"></a>1、使用super调用父类的构造方法</h3><p>子类不继承父类的构造方法；</p>
<p>子类如果想使用父类的构造方法，必须使用super关键字；</p>
<p>super语句必须是子类构造方法中的第一条语句；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number;</span><br><span class="line">	String name;</span><br><span class="line">	Student()&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	Student(<span class="keyword">int</span> number,String name)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">		<span class="keyword">this</span>.number=number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniverStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> isMarriage;</span><br><span class="line">	UniverStudent(<span class="keyword">int</span> number,String name,<span class="keyword">boolean</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">super</span>(number,name); <span class="comment">//super操作父类构造方法，调用带参数的</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getIsMarriage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> isMarriage;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		UniverStudent zhang =<span class="keyword">new</span> UniverStudent(<span class="number">20111</span>,<span class="string">&quot;张三&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">		<span class="keyword">int</span> number =zhang.getNumber();</span><br><span class="line">		String name=zhang.getName();</span><br><span class="line">		<span class="keyword">boolean</span> marriage =zhang.getIsMarriage();</span><br><span class="line">		System.out.println(name+<span class="string">&quot;的学号&quot;</span>+number);</span><br><span class="line">		<span class="keyword">if</span>(marriage==<span class="keyword">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(name+<span class="string">&quot;已婚&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(name+<span class="string">&quot;未婚&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：如果子类构造方法中，没有明显使用super关键字调用父类的构造方法，默认：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">super</span>();</span><br></pre></td></tr></table></figure>

<p>即调用不带参数的构造方法；</p>
<p>如果类中定义了一个或多个构造方法，java不提供默认的构造方法；因此存在多个构造方法，应当创建不带参数的构造方法；</p>
<p>？省略UniverStudent中的super，默认调用无参构造函数；</p>
<h3 id="2、使用super操作被隐藏的成员变量和方法"><a href="#2、使用super操作被隐藏的成员变量和方法" class="headerlink" title="2、使用super操作被隐藏的成员变量和方法"></a>2、使用super操作被隐藏的成员变量和方法</h3><p>想要访问被隐藏的成员变量和方法，使用super关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">super.成员变量；</span><br><span class="line">super.方法；</span><br></pre></td></tr></table></figure>

<p>🐖：子类创建对象，父类被隐藏的成员变量也会分配内存，但不属于任何对象，这些对象必须使用super调用；</p>
<p>​        子类创建对象时，被隐藏的成员方法，也会分配入口地址，该入口只对super可见；</p>
<p>​        <strong>被隐藏成员方法中如果调用了，和隐藏的成员同名的变量，局部变量是隐藏的成员变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class A&#123;</span><br><span class="line">...</span><br><span class="line">int x;</span><br><span class="line">void f(int b)&#123;</span><br><span class="line">        x&#x3D;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x;<span class="comment">//隐藏父类的x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>super.f();出现的x是隐藏的x，改变的x是被隐藏的x。</p>
<h2 id="六、final关键字"><a href="#六、final关键字" class="headerlink" title="六、final关键字"></a>六、final关键字</h2><p>final关键字可以修饰类，成员变量和方法中的局部变量；</p>
<h3 id="1、final类"><a href="#1、final类" class="headerlink" title="1、final类"></a>1、final类</h3><p>如果类用final修饰，<strong>不允许被继承</strong>，不能有子类；</p>
<p>不能被改变</p>
<h3 id="2、final方法"><a href="#2、final方法" class="headerlink" title="2、final方法"></a>2、final方法</h3><p>final修饰的方法，不允许被重写，不允许被隐藏，<strong>不允许任何篡改</strong>；</p>
<h3 id="3、常量"><a href="#3、常量" class="headerlink" title="3、常量"></a>3、常量</h3><p>成员变量和局部变量被final修饰，就是常量；</p>
<p>常量声明时没有默认值，因此必须提起指定常量的值；而且不能发生变化；</p>
<h2 id="七、对象的上转型对象"><a href="#七、对象的上转型对象" class="headerlink" title="七、对象的上转型对象"></a>七、对象的上转型对象</h2><p>假设A类是B类的父类；用子类创建对象，并把这个对象的引用放到父类的对象中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>;</span><br><span class="line">a=<span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">A a;</span><br><span class="line">B b =<span class="keyword">new</span> B();</span><br><span class="line">a=b;</span><br></pre></td></tr></table></figure>

<p>成为对象的上转型对象；</p>
<h3 id="1、上转型对象的特点"><a href="#1、上转型对象的特点" class="headerlink" title="1、上转型对象的特点"></a>1、上转型对象的特点</h3><p>a、上转型对象，不能操作子类新增的成员变量，不能调用子类新增的方法；</p>
<p>b、上转型对象，可以访问子类继承或被隐藏的成员变量，也可以调用子类继承的方法或子类重写的方法</p>
<p>🐖：上转型对象调用被子类重写的方法，相当于子类对象去调用；</p>
<p>​        <strong>当某个方法被重写时，上转型对象去调用，一定是调用了子类重写的方法；</strong></p>
<p>🐖：<strong>可以将对象的上转型对象强制赋给一个子类对象，这时，该子类对象又具备了该子类所有的属性和功能；</strong></p>
<p>​        <strong>不可以将父类创建的对象的引用赋给子类声明的对象；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anthropoid</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> m=<span class="number">12.58</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">Anthropoid</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> m=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">60</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">computer</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> c=a+b;</span><br><span class="line">		System.out.println(a+<span class="string">&quot;加&quot;</span>+b+<span class="string">&quot;等于&quot;</span>+c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		System.out.println(m+<span class="string">&quot;**&quot;</span>+s+<span class="string">&quot;**&quot;</span>+m);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		People people = <span class="keyword">new</span> People();</span><br><span class="line">		Anthropoid monkey = people;</span><br><span class="line">		monkey.crySpeak(<span class="string">&quot;I love this game&quot;</span>); <span class="comment">// 当某个方法被重写时，上转型对象去调用，一定是调用了子类重写的方法</span></span><br><span class="line">		<span class="comment">//monkey.n=100;      a、上转型对象，不能操作子类新增的成员变量，不能调用子类新增的方法；</span></span><br><span class="line">		<span class="comment">//monkey.computer(12,19);  a、上转型对象，不能操作子类新增的成员变量，不能调用子类新增的方法；</span></span><br><span class="line">		System.out.println(monkey.m); <span class="comment">//b、上转型对象，可以访问子类继承或被隐藏的成员变量，也可以调用子类继承的方法或子类重写的方法</span></span><br><span class="line">		System.out.println(people.m);</span><br><span class="line">		People zhang = (People)monkey;</span><br><span class="line">		zhang.computer(<span class="number">44</span>, <span class="number">21</span>);</span><br><span class="line">		zhang.m=<span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">		System.out.println(zhang.m);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、继承与多态"><a href="#八、继承与多态" class="headerlink" title="八、继承与多态"></a>八、继承与多态</h2><h3 id="1、多态"><a href="#1、多态" class="headerlink" title="1、多态*"></a>1、多态*</h3><p>当一个类有很多子类，这些都重写了父类的某个方法，用子类创建对象的引用赋给父类的声明——对象的上转型对象；</p>
<p>当用父类对象去调用这个方法，就可能产生多种行为；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;汪、汪...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;喵、喵...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用不同的子类创建对象的引用赋给父类，产生不同的行为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Animal animal =<span class="keyword">new</span> cat();</span><br><span class="line">		animal.cry();</span><br><span class="line">		animal =<span class="keyword">new</span> dog();                                           <span class="comment">//多态</span></span><br><span class="line">		animal.cry();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="九、abstract类和方法"><a href="#九、abstract类和方法" class="headerlink" title="九、abstract类和方法"></a>九、abstract类和方法</h2><p>abstract修饰的类称为抽象类；</p>
<p>abstract修饰的方法称为抽象方法；抽象方法只允许声明，不允许实现；不允许同时使用final、abstract同时修饰一个方法；</p>
<h3 id="1、abstract类的特点"><a href="#1、abstract类的特点" class="headerlink" title="1、abstract类的特点"></a>1、abstract类的特点</h3><p>a、abstract类中有abstract方法、也可以有非abstract方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;  <span class="comment">//抽象类可以有抽象方法和非抽象方法；</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x-y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>b、abstract类不能用new运算符创建对象。如果某个非抽象类继承一个抽象类，那么它必须重写父类的抽象方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x+y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 继承与接口;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		B b =<span class="keyword">new</span> B();</span><br><span class="line">		<span class="keyword">int</span> sum=b.sum(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">		<span class="keyword">int</span> sub=b.sub(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">		System.out.println(sub);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：<strong>抽象类也可以没有抽象方法</strong></p>
<p>一个抽象类继承另一个抽象类，可以重写抽象方法，也可以继承这个抽象方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x+y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：不能使用抽象类创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		C c =<span class="keyword">new</span> C();</span><br><span class="line">		<span class="keyword">int</span> sum=c.sum(<span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">		<span class="keyword">int</span> sub=c.sub(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">		System.out.println(sub);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>🐖：抽象类只关心，方法名、方法类型、方法参数，不关心具体实现步骤，即方法体；</p>
<p>普通类继承抽象类重写所有抽象方法–<strong>不包括普通方法</strong>；抽象类继承抽象类不需要重写所有；</p>
<h3 id="2、abstract类与多态"><a href="#2、abstract类与多态" class="headerlink" title="2、abstract类与多态 *"></a>2、abstract类与多态 *</h3><p>a、使用多态进行编程核心技术之一，使用上转型对象，将抽象类声明对象作为其子类的上转型对象，那么这个对象就可以调用子类重写方法；</p>
<p>b、多态设计程序的好处是，体现程序设计的“开闭原则”，对扩展程序开放，对修改程序关闭；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getAnimalName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;喵、喵...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAnimalName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;汪、汪...&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAnimalName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simulator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playSound</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;现在播放&quot;</span>+animal.getAnimalName()+<span class="string">&quot;类声音&quot;</span>);</span><br><span class="line">		animal.cry();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类只需要重写父类方法；</p>
<p>可以增加功能；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Simulator si= <span class="keyword">new</span> Simulator();</span><br><span class="line">		si.playSound(<span class="keyword">new</span> dog());</span><br><span class="line">        si.playSound(<span class="keyword">new</span> cat());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十、接口"><a href="#十、接口" class="headerlink" title="十、接口"></a>十、接口</h2><p>java不允许多继承；</p>
<p>优点：便于管理，使java简单</p>
<p><strong>为克服单一继承，java使用接口；</strong></p>
<h3 id="1、接口的声明与使用"><a href="#1、接口的声明与使用" class="headerlink" title="1、接口的声明与使用"></a>1、接口的声明与使用</h3><h4 id="a、接口的声明"><a href="#a、接口的声明" class="headerlink" title="a、接口的声明"></a>a、接口的声明</h4><p>使用关键字interface；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 接口名字</span>;</span><br></pre></td></tr></table></figure>



<h4 id="b、接口体"><a href="#b、接口体" class="headerlink" title="b、接口体"></a>b、接口体</h4><p>接口体包含常量定义和方法定义；</p>
<p>接口体只有抽象方法，没有普通方法；</p>
<p>接口体中所有常量，方法的访问权限都<strong>一定是public</strong>允许省略public和abstract</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Printable&#123;</span><br><span class="line">	public final int MAX&#x3D;100;    &#x2F;&#x2F;等价写法 int MAX&#x3D;100;</span><br><span class="line">	public abstract void add();   &#x2F;&#x2F;等价写法  void add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="c、接口的使用"><a href="#c、接口的使用" class="headerlink" title="c、接口的使用"></a>c、接口的使用</h4><p>一个类通过使用关键字implements声明自己实现一个或多个接口，如果实现<strong>多个接口用逗号隔开</strong></p>
<p>例如A类实现B，C接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">B</span>,<span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如Animal的子类Dog实现B，C接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">B</span>,<span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>🐖：<strong>普通类重写该接口所有方法</strong>，如果没有重写完，那么这个类是抽象类——抽象类实现部分或者全部；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;  <span class="comment">//public接口，不加public默认是友好接口</span></span><br><span class="line">	<span class="keyword">int</span> MAX=<span class="number">100</span>;    <span class="comment">//默认public</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>;  <span class="comment">//默认public abstract</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> y)</span></span>;  <span class="comment">//没有被实现接口的类实现，程序报错。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        重写接口方法，方法体要去掉abstract关键字，而且一定要写public，否则默认为友好方法，降低了访问权限，是不允许的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">China</span> <span class="keyword">implements</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  <span class="comment">//一定去掉abstract关键字，必须加上public</span></span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++) &#123;</span><br><span class="line">			sum=sum+i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//没有实现全部抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明接口前加public，该接口是public接口，可以被任何一个类声明，不加接口默认友好接口，需要在一个包中才能被声明；</p>
<p>常量可以用类名或者接口名直接调用；</p>
<p>如果父类实现某个接口，子类也默认实现了某个接口，不需要显示声明接口；</p>
<p>接口也可以被继承；一个接口继承另一个接口，使用extends关键字；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		China c=<span class="keyword">new</span> China();</span><br><span class="line">		System.out.println(c.f(<span class="number">8</span>));<span class="comment">//输出返回值</span></span><br><span class="line">		System.out.println(Computer.MAX);  <span class="comment">// 常量直接通过类名或者接口名访问常量</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>import不仅可以引用包中的类，而且可以引用接口；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br></pre></td></tr></table></figure>



<h3 id="2、理解接口"><a href="#2、理解接口" class="headerlink" title="2、理解接口"></a>2、理解接口</h3><p>为什么使用接口？</p>
<p>a、解决类只能被单一继承的问题——可以增加很多类都需要实现的功能；</p>
<p>b、实现相同接口的类直接没有具体的关系；</p>
<p>c、接口只关心操作，不关心操作具体实现——设计程序不必拘泥于细节；</p>
<h3 id="3、接口回调"><a href="#3、接口回调" class="headerlink" title="3、接口回调"></a>3、接口回调</h3><p>定义：实现某一接口的类，创建的对象的引用，赋给该接口声明的接口变量中；</p>
<p>那么接口变量就可以调用，被类重写的接口方法——相当于通知相应的对象去调用这个方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Computer com;<span class="comment">//声明接口变量</span></span><br><span class="line">		com= <span class="keyword">new</span> China();<span class="comment">//接口变量存放对象的引用</span></span><br><span class="line">		<span class="keyword">int</span> x=com.f(<span class="number">5</span>);<span class="comment">//接口回调</span></span><br><span class="line">		System.out.println(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、接口与多态"><a href="#4、接口与多态" class="headerlink" title="4、接口与多态*"></a>4、接口与多态*</h3><p>接口回调之后，产生接口的多态；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">	<span class="comment">//int MAX=100;    //默认public</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showAdvertisement</span><span class="params">()</span></span>;  <span class="comment">//默认public abstract</span></span><br><span class="line">	<span class="function">String <span class="title">getAdName</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不同的类去实现相同的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Asus</span> <span class="keyword">implements</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAdvertisement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;让世界更美好！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAdName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;华硕&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lenmon</span> <span class="keyword">implements</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAdvertisement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;没有最好，只有更好&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;不能一个输出&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAdName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;联想&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口回调，产生不同行为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdBoard</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Computer ad)</span> </span>&#123;  <span class="comment">//接口回调</span></span><br><span class="line">		System.out.println(<span class="string">&quot;厂家&quot;</span>+ad.getAdName());</span><br><span class="line">		ad.showAdvertisement();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AdBoard ad =<span class="keyword">new</span> AdBoard();</span><br><span class="line">		ad.show(<span class="keyword">new</span> Asus());</span><br><span class="line">		ad.show(<span class="keyword">new</span> Lenmon());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5、abstract类和接口的区别"><a href="#5、abstract类和接口的区别" class="headerlink" title="5、abstract类和接口的区别"></a>5、abstract类和接口的区别</h3><table>
<thead>
<tr>
<th>abstract类</th>
<th>接口</th>
</tr>
</thead>
<tbody><tr>
<td>可以有抽象方法，也可以没有抽象方法</td>
<td>必须全是抽象方法</td>
</tr>
<tr>
<td>既可以有常量，也可以有变量</td>
<td>只有常量，不能有变量</td>
</tr>
</tbody></table>
<p>🐖：子类不仅需要实现父类的方法还需要使用父类的变量和非abstract方法，考虑abstract类</p>
<p>​    不需要继承，只需要给出具体的抽象方法细节，考虑接口</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
</search>
